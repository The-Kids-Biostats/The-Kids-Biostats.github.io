---
title: "AI in Biostatistics"
output: html_document
date: "2024-05-06"
author: "Dr Matthew Cooper, Wesley Billingham"
categories:
  - AI
  - R
draft: true
---

# Overview

AI is a hot topic in most fields right now, and biostatistics is no exception! We (the Telethon Kids Institute biostats team) were asked to present at the weekly Institute seminar on the use of AI in statistical workflows.

The term AI has many meanings depending on the context - in this article we are referring exclusively to (and use the term interchangeably with) large language models (LLMs) such as ChatGPT and Claude. These tools are useful not just for writing sentences and paragraphs of text, but also functioning code!

Since first investigating the capabilities of ChatGPT at writing R code, our team has been working to utilise it safely and effectively in our everyday workflows.

The summary of our message to the Institute staff was that we cannot ignore the massive increase in efficiency that AI ***can*** bring if used properly. However, we also need to be [**very**]{.underline} aware of its limitations, and the necessary role of human experts in the process of validating any non-trivial output.

This is Part One in a two part series. This part will look at the capabilities of AI to benefit our workflows and increase efficiency. The next part will look at some limitations of the technology as it currently exists, including some practical recommendations to identify these issues.

## Format of this post

We will work through a couple of practical examples of how we might use AI in an everyday workflow:

1.  **Data Visualisation**

2.  **Statistical Analysis**

3.  **Bonus - Shiny App Development**

In these examples, we will increasingly take our hands off the wheel and allow AI (in these examples, [ChatGPT 4.0](https://openai.com/chatgpt/)) to perform more and more of the task.

# Example 1 - Data Visualisation

A couple of summers ago (2021/22) felt unusually hot in Perth, Australia. Specifically, it seemed that the maximum temperature was regularly exceeding round numbers like 35 or 40 degrees Celsius. The most recent summer felt similar, but as it relates to 'hot days', were we seeing more of these? My colleague, being a statistician, wished to contrast this most recent summer to previous summers.

He whipped up a quick plot using ggplot2, with a focus on the number of 'summer days' above a certain maximum (and equally important, 'hot nights' that stayed above certain minimums). Shown below, is data through to mid February 2024:

```{r out.width="700px", fig.align='center', echo = F}
knitr::include_graphics(path = "weather_p1.jpeg")
```

Here we can see the number of days over a certain maximum for each year since 2010. For example, in 2023, Perth had 0 days above 40째C and 4 above 38째C.

The sweltering summer in question (2021/22) had a whopping 12 days over 40째C and 23 above 38째C. Since the next highest count since 2010 was 7 and 14 respectively, it's fair to say this was quite the outlier! And the 'current' (at the time) summer was similar was to this, but yet to exceed it.

My colleague felt that the data visualisation could probably be cleaner and more clear, so enlisted ChatGPT for help (for one of the first times!).

## Providing the Blueprint

ChatGPT allows the user to provide images as a part of prompts. With that in mind, the image was uploaded first by itself. ChatGPT was able to successfully identify the key elements of the plot just from the image (!), and so the next step was to give some guidance to make the plot more visually appealing.

With just one prompt: "can you facet wrap the min max data", in addition to the original plot, it got to work. Once the original data was provided, it returned the requested modifcation - complete with Python code for the plot (R cannot be run within ChatGPT, though we certainly could have requested R code to run ourselves instead).

Here is the entire prompt history, from beginning to end:

-   One image
-   One command
-   Some (undescribed) data

was all the context required to understand and return, approximately, the desired output. We say approximately, since some key information such as the counts above certain levels, is absent from this first attempt.

```{r out.width="700px", fig.align='center', echo = F}
knitr::include_graphics(path = "weather_p3.png")
```

```{r out.width="700px", fig.align='center', echo = F}
knitr::include_graphics(path = "weather_p4.png")
```

## End Result and Discussion

After some further refinement and back-and-forth, we arrive at a much-improved plot which more closely captures the spirit of the original, while improving the colour scheme and facetting the data.

```{r out.width="700px", fig.align='center', echo = F}
knitr::include_graphics(path = "weather_p8.png")
```

Plots are a great use-case of AI, since the nitty gritty of colours, panes, text, etc can be a time-consuming hassle to do manually. AI in our experience does a good job of translating our descriptive visual prompts into code that achieves the described vision. Furthermore, the output is instantly verifiable (keep this point in mind!) and easy to refine.

# Example 2 - Statistical Workflow

The following example was created specifically for our presentation. We wanted to mimic a researcher with a passing understanding in statistics, but no expertise, as they attempt to run through an entire statistical pipeline from design to analysis. This would involve more careful and lengthy prompting than the previous example.

For the example, we downloaded a data set contacting simulated lung data for 8528 individuals. It can be found here:

https://stats.idre.ucla.edu/stat/data/hdp.csv (NOTE clicking the link initiates a download of the data.)

The data has the following variables of interest for our example:

-   **Outcome**
    -   remission (0/1)
-   **Patient-level variables**
    -   IL6 levels
    -   CRP levels
    -   Length of hospital stay
    -   Family history
    -   Cancer stage
-   **Physician-level variables**
    -   Physician experience
    -   Physician ID
    -   Hospital ID

We will be very careful to avoid statistical terminology as we prompt ChatGPT, but we can see that there is an implied nesting structure to our data, with patient inside physician inside hospital. With that in mind, and the fact that our outcome is binary, we are hoping that ChatGPT suggests a hierarchical logistic regression.

## Providing the Problem

In this example, we provided ChatGPT with a very high-level summary of our data and research question, as seen here:

```{r out.width="700px", fig.align='center', echo = F}
knitr::include_graphics(path = "log_reg_1_v2.png")
```

Again, we have tried to use prompts that anyone with some familiarity with stats and data analysis would be able to replicate and understand. Here, we simply mention to ChatGPT that there are patients, doctors and hospitals (highlighted above).

## The Response

Amazingly, especially if you have had limited exposure to AI, these high-level, lay descriptions of our data and research questions were sufficient for ChatGPT to suggest a mixed-effects logistic regression model. It recognised the binary outcome and the hierarchical structure of the data, and proceeded to provide R code to perform the analysis.

```{r out.width="700px", fig.align='center', echo = F}
knitr::include_graphics(path = "log_res_2_v2.png")
```

Here is where we encounter a difference from our previous visualisation example, however. For someone unfamiliar with statistics, would they have known if this answer happened to be incorrect? Broadly, this response is on track, but should Doctor be nested within Hospital? (keep this in mind! #2).

For now, we do recognise that it has selected an appropriate model to get started. An impressive feat!

## End Result and Discussion

For brevity's sake, we will not include the whole prompting process here. However, following the model specification, ChatGPT was able to successfully guide us through adding a random slope, and then summarising our model using the `broom.mixed` package (broom for mixed models, as the name suggests).

It then gave us code to check the model fit, run model diagnostics, and perform sensitivity analysis. At each stage, it was able to give advice on interpretation and next steps that we could not fault. Here are some highlights:

```{r out.width="700px", fig.align='center', echo = F}
knitr::include_graphics(path = "log_reg_6.png")
```

```{r out.width="700px", fig.align='center', echo = F}
knitr::include_graphics(path = "log_reg_4.png")
```

# Bonus Example - Shiny App

We now move to a more advanced programming exercise, and simultaneously lean more heavily on ChatGPT to do the bulk of the work for us. In this example, we wanted to create a [Shiny App](https://shiny.posit.co/). We want this app to import a dataset containing columns of personally identifiable information (PID) and export a new dataset which masks this PID (and all data in the dataset) while maintaining the broad structure/distribution of the original data.

## Providing the Idea

Similar to example 2, we're interested in how ChatGPT performs with minimal prompting and technical jargon. Our initial request looks like this:

## Refinement

## End Result and Discussion

In this first part, we have seen how easy and powerful the use of AI can be in the data analysis and statistical workflow. In part two, we will look at some pitfalls of AI and some traps we can fall into. We'll see if we can determine some good rules-of-thumb for its use to ensure our AI-assisted work remains both efficient and accurate.
