---
<<<<<<< Updated upstream:posts/DRAFT_likert_visualisation/likert_visualisations.qmd
title: "Visualisation for likert data"
author: "Dr Matt Cooper and Zac Dempsey"
=======
title: "Models - Condensed code and output"
author: "Dr Matt Cooper and Wesley Billingham"
>>>>>>> Stashed changes:posts/DRAFT_model_function/model_function.qmd
format:
  html:
    code-fold: true
    tabset: true
    toc: true
    toc-location: left
<<<<<<< Updated upstream:posts/DRAFT_likert_visualisation/likert_visualisations.qmd
date: "2024-09-30"
categories:
  - R
  - Visualisations
=======
date: "2025-01-22"
categories:
  - R
  - Modelling
  - Quarto
>>>>>>> Stashed changes:posts/DRAFT_model_function/model_function.qmd
draft: true
editor_options: 
  chunk_output_type: console
execute:
  echo: false
  warning: false 
fig-align: center
fig-format: png
---

# Overview

<<<<<<< Updated upstream:posts/DRAFT_likert_visualisation/likert_visualisations.qmd
Likert data are widely found in research, they are useful for getting participants to rate things or to provide an average quantity as a response in situations where asking for the exact quantity is problematic. How can asking for an exact quantity be problematic, well take the example below that we expand upon, very few people drink the exact same amount of water each day, so asking participants "How many (250ml) glasses of water do you drink per day" and getting a response of "3" is typically pointless, there is likely substantial measurement error here and if they the participant drank 4 glasses yesterday (anomaly or otherwise) is the response not just outright incorrect?

The below is nothing ground breaking. We went in search of a concise, succinct, and accurate way to display (specifically) pre-post likert response data, and this is where we are currently at.

# The data

## Definitions

Firstly, some definitions. There are two main types of likert data. We are going to refer to them as Ordinal and Bidirectional. 

**Ordinal likert data** *(sometimes called unipolar likert data, or possibly interval likert data)* is category responses that have some natural order (decreasing/increasing) to them, the width of categories and the distance between categories are not always consistent, and they often represent a underlying continuous scale that has been 'binned' into categories.

An example. *"How many glasses of water do you typically drink per day?* with response options:

- Less than one glass/day
- 1-2 glasses/day
- 3-4 glasses/day
- 5-6 glasses/day
- More than 6 glasses/day

**Birectional likert data** *(sometimes called bipolar likert data)* is category responses that have a natural order that goes in two opposing directions - typically negative responses and positive responses - around a central (or neutral) point.

An example. *"The amount of reading I do influences how much reading my child does?* with response options:

- Strongly disagree
- Disagree
- Neither agree nor disagree (the neutral midpoint)
- Agree
- Strongly agree

# Ordinal

## Demo data

```{r setup, include = T}
library(simstudy)
library(ggsankey); library(ggalluvial)
library(likert); library(patchwork)
library(gt); library(gtsummary)
library(flextable)
library(thekidsbiostats) # install with remotes::install_github("The-Kids-Biostats/thekidsbiostats")
```

We're going to use one of our favourite packages to create some sythentic data to use.

We have some `pre` and `post` response data, a `group` identified (intervention or control), and then some labelled response columns.

```{r}
# dat_i is the intervention group
n <- 183 # Set the number of individuals
def <- defData(varname = "pre", formula = "1;5", dist = "uniformInt") # Pre values: uniformly distributed between 1 and 5
dat_i <- genData(n, def)
group_probs <- c(0.45, 0.45, 0.10)
set.seed(123) # For reproducibility
dat_i$grp <- sample(1:3, n, replace = TRUE, prob = group_probs)
dat_i$post <- dat_i$pre

dat_i$post[dat_i$grp == 2] <- pmin(dat_i$pre[dat_i$grp == 2] + (rbinom(sum(dat_i$grp == 2), 2, 0.2) + 1), 5) # Increase by 1, max 5
dat_i$post[dat_i$grp == 3] <- pmax(dat_i$pre[dat_i$grp == 3] - (rbinom(sum(dat_i$grp == 3), 2, 0.2) + 1), 1) # Decrease by 1, min 1
# dat_c is the control group
n <- 154 # Set the number of individuals
def <- defData(varname = "pre", formula = "1;5", dist = "uniformInt") # Pre values: uniformly distributed between 1 and 5
dat_c <- genData(n, def)
group_probs <- c(0.55, 0.25, 0.20)
set.seed(123) # For reproducibility
dat_c$grp <- sample(1:3, n, replace = TRUE, prob = group_probs)
dat_c$post <- dat_c$pre

dat_c$post[dat_c$grp == 2] <- pmin(dat_c$pre[dat_c$grp == 2] + (rbinom(sum(dat_c$grp == 2), 2, 0.2) + 1), 5) # Increase by 1, max 5
dat_c$post[dat_c$grp == 3] <- pmax(dat_c$pre[dat_c$grp == 3] - (rbinom(sum(dat_c$grp == 3), 2, 0.2) + 1), 1) # Decrease by 1, min 1

dat <- rbind(cbind(dat_i, group = "Intervention"), 
             cbind(dat_c, group = "Control")) %>% 
  mutate(post = as.integer(post)) %>% 
  select(-grp)

dat <- dat %>% 
  mutate(pre_l = fct_case_when(pre == 1 ~ "Less than one cup/day",
                               pre == 2 ~ "About 1-2 cups/day",
                               pre == 3 ~ "About 3-4 cups/day",
                               pre == 4 ~ "About 5-6 cups/day",
                               pre == 5 ~ "More than 6 cups/day"),
         post_l = fct_case_when(post == 1 ~ "Less than one cup/day",
                                post == 2 ~ "About 1-2 cups/day",
                                post == 3 ~ "About 3-4 cups/day",
                                post == 4 ~ "About 5-6 cups/day",
                                post == 5 ~ "More than 6 cups/day"))

head(dat, 5) %>%
  thekids_table(colour = "Saffron", padding = 3)
```

## Visualisation
=======
```{r}
library(thekidsbiostats) # install with remotes::install_github("The-Kids-Biostats/thekidsbiostats")
```

We are constantly working on the appearance of the reports we generate for our colleagues and collaborators. Navigating `.html` and `.docx` output for different use cases, all while navigating the move from [R Markdown](https://rmarkdown.rstudio.com/) to [Quarto](https://quarto.org/). At this stage, we have all but abandoned the idea of rendering direct to `.pdf` as we find `.docx` more friendly (tracking changes with collaborators, certain output manipulating functions) and it is readily 'pdfable' - but more on all that in a future post.

Our primary report output format is `.html` and we have been looking for ways to harness certain Quarto features to improve both the aesthetic of our reports as well as our use of real estate. Often, we are presenting output for a range of models separated by narration. It is important that all models are presented with sufficient context (as opposed to just output dumped on a page) and we've settled on what we think is a nice way to ensure relevant information (like model diagnostics) are readily available to the reader, as opposed to being tucked away at the end - or worse - left out altogether.  

Below, we present the current way we present output from a linear regression within out `.html` reports.

![](function_output.png){fig-align="center" width="80%"}

# Model Output - Presentation

## Presentation overview

We use a combination of [tabset panels](https://quarto.org/docs/interactive/layout.html#tabset-panel) (implemented with `.panel-tabset`) and [margin content](https://quarto.org/docs/authoring/article-layout.html#margin-content) (implemented with `.column-margin`) to achieve what we think is a nice balance of real estate utilisation and content compartmentalisation. 

## Data for the demonstration

To demonstrate, we will use slightly modified dataset containing Birth Weight data (read more with `?MASS::birthwt`) from the `MASS` package (`MASS::birthwt`). 

The dataset has 189 observations (rows) and in the code below we just tidy up some variables prior to running the model; we implement a linear regression (`lm`) model.

**Outcome:** infant birth weight (`bwt`). 

**Exposure of interest:** maternal smoking status during pregnancy (`smoke`).

**Covariates:** maternal age (`age`) and history of hypertension (`ht`).

```{r echo=TRUE}
dat_bwt <- MASS::birthwt
dat_bwt <- dat_bwt %>% 
  tibble() %>% 
  mutate(smoke = factor(case_when(smoke == 1 ~ "Yes",
                                  smoke == 0 ~ "No",
                                  T ~ NA_character_)),
         ht = factor(case_when(ht == 1 ~ "Yes",
                               ht == 0 ~ "No",
                               T ~ NA_character_)))
```

## Demonstration

### Running the function

We can run our function as per the code below.

```{r echo=TRUE}
#| code-fold: false
mod_bwt <- dat_bwt %>% 
  thekids_model("bwt", "smoke", "age + ht")
```

In this, we have passed (piped) the data into the first argument, specified the outcome variable in the next argument, specified the exposure of interest in the next argument, and specified the remainder of the models formula next (that is, any covariates we are looking to have in our model). 

Alternatively, we could run our write out model in the 'normal' way and pass it to out output processing function - which is really the workhorse of the above funcion - and this would look something like that shown below.

```{r echo=TRUE, eval=F}
#| code-fold: false
my_model <- lm(bwt ~ smoke + age + ht, data = dat_bwt)
thekids_model_output(my_model, by = "smoke") # still need to specify our exposure of interest
```

Now, we see how the output would appear in an `.html` report.

### Function output

::: panel-tabset
## Desc stats

The table below shows summary statistics for all variables in the model by the primary exposure variable (maternal smoking status in pregnancy).

```{r}
mod_bwt$mod_desc %>% 
  thekids_table(colour = "DarkTeal",
                padding.left = 10, padding.right = 10)
```

The figure below shows the distribution of the primary outcome variable (infant birth weight) by the primary exposure variable (maternal smoking status in pregnancy).

```{r fig.height=5, fig.width=5, fig.align='center'}
mod_bwt$mod_desc_plot
```

## Model diag

The four panel plot below shows diagnostic plots that can aid in determining if the required assumptions of model are met.

**Based on the below,** the model fit is deemed to be good. 

```{r fig.height=6, fig.width=6, fig.align='center'}
mod_bwt$mod_diag
```

Broadly, what we are looking for (and why) in these plots are: 

+ *(top-left)* relatively even bands of points around a flat line at 0 as we move from left to right | linear relationship check, 
+ *(top right)* the points to fall close to the diagonal line | normal distribution of errors check, 
+ *(bottom-right)* the points to funnel close to 0 as we move from left to right with no extreme values in the top right or bottom right corners | influential observations check, and 
+ *(bottom-left)* checking residuals are relatively evenly spread across the range of predictions | homoscedasticity check.

## Model output

The table below shows the model output for the linear regression model, including the beta coefficient (and 95% confidence interval) and p-value associated with each variable in the model.
>>>>>>> Stashed changes:posts/DRAFT_model_function/model_function.qmd

```{r}
mod_bwt$mod_output %>% 
  thekids_table(colour = "DarkTeal",
                padding.left = 10, padding.right = 10)
```

<<<<<<< Updated upstream:posts/DRAFT_likert_visualisation/likert_visualisations.qmd
We create the plot as three panels, then use `patchwork` to control the joining together of the panels into one image.
=======
## Model effect
>>>>>>> Stashed changes:posts/DRAFT_model_function/model_function.qmd

The figure and table below show the predicted value (also known as the estimated marginal mean) for the outcome variable (infant birth weight) for each level of the exposure of interest (here, no maternal smoking in pregnancy or maternal smoking in pregnancy), along with a 95% confidence interval. Note, see table footnote for the values used for the other variables in the model.

```{r fig.height=4.5, fig.width=5, fig.align='center'}
mod_bwt$mod %>% 
  ggeffects::predict_response("smoke") %>% 
  plot
```

<<<<<<< Updated upstream:posts/DRAFT_likert_visualisation/likert_visualisations.qmd
I know what you're thinking, i) that looks great, ii) slow down, you had two groups. Correct on both accounts. This is just the intervention group data.

=======
>>>>>>> Stashed changes:posts/DRAFT_model_function/model_function.qmd
```{r}
mod_bwt$mod %>% 
  ggeffects::predict_response("smoke") %>% 
  ggeffects::print_html()
```
:::

::: column-margin
**Summary**

+ There is evidence to suggest that smoking during pregnancy is associated with reduced birth weight.
+ Maternal smoking during pregnancy is associated with a `r round(coef(mod_bwt$mod)[2],2)`g lower birth weight (95% CI: `r round(confint(mod_bwt$mod)[2,1],1)`,`r round(confint(mod_bwt$mod)[2,2],1)`).
:::

The code to generate this can be viewed below.

```{r echo = T, eval=F}
# ::: panel-tabset
# ## Desc stats
# 
# The table below shows summary statistics for all variables in the model by the primary exposure variable (maternal smoking status in pregnancy).
# 
# ```{r}
# mod_bwt$mod_desc %>% 
#   thekids_table(colour = "DarkTeal",
#                 padding.left = 10, padding.right = 10)
# ```
# 
# The figure below shows the distribution of the primary outcome variable (infant birth weight) by the primary exposure variable (maternal smoking status in pregnancy).
# 
# ```{r fig.height=5, fig.width=5, fig.align='center'}
# mod_bwt$mod_desc_plot
# ```
# 
# ## Model diag
# 
# The four panel plot below shows diagnostic plots that can aid in determining if the required assumptions of model are met.
# 
# **Based on the below,** the model fit is deemed to be good. 
# 
# ```{r fig.height=6, fig.width=6, fig.align='center'}
# mod_bwt$mod_diag
# ```
# 
# Broadly, what we are looking for (and why) in these plots are: 
# 
# + *(top-left)* relatively even bands of points around a flat line at 0 as we move from left to right | linear relationship check, 
# + *(top right)* the points to fall close to the diagonal line | normal distribution of errors check, 
# + *(bottom-right)* the points to funnel close to 0 as we move from left to right with no extreme values in the top right or bottom right corners | influential observations check, and 
# + *(bottom-left)* checking residuals are relatively evenly spread across the range of predictions | homoscedasticity check.
# 
# ## Model output
# 
# The table below shows the model output for the linear regression model, including the beta coefficient (and 95% confidence interval) and p-value associated with each variable in the model.
# 
# ```{r}
# mod_bwt$mod_output %>% 
#   thekids_table(colour = "DarkTeal",
#                 padding.left = 10, padding.right = 10)
# ```
# 
# ## Model effect
# 
# The figure and table below show the predicted value (also known as the estimated marginal mean) for the outcome variable (infant birth weight) for each level of the exposure of interest (here, no maternal smoking in pregnancy or maternal smoking in pregnancy), along with a 95% confidence interval. Note, see table footnote for the values used for the other variables in the model.
# 
# ```{r fig.height=4.5, fig.width=5, fig.align='center'}
# mod_bwt$mod %>% 
#   ggeffects::predict_response("smoke") %>% 
#   plot
# ```
# 
# ```{r}
# mod_bwt$mod %>% 
#   ggeffects::predict_response("smoke") %>% 
#   ggeffects::print_html()
# ```
# :::
# 
# ::: column-margin
# **Summary**
# 
# + There is evidence to suggest that smoking during pregnancy is associated with reduced birth weight.
# + Maternal smoking during pregnancy is associated with a `r round(coef(mod_bwt$mod)[2],2)`g lower birth weight (95% CI: `r round(confint(mod_bwt$mod)[2,1],1)`,`r round(confint(mod_bwt$mod)[2,2],1)`).
# :::
```

<<<<<<< Updated upstream:posts/DRAFT_likert_visualisation/likert_visualisations.qmd
We can double up the plot, again using `patchwork` to show both groups.
=======
::: column-margin
If you copy all this code, you can then select all, and use ctrl+C (or command+c) to uncomment the code.
:::
>>>>>>> Stashed changes:posts/DRAFT_model_function/model_function.qmd

## Pros and cons

The motivation behind this was really to reduce the length of code in our [Quarto](https://quarto.org/) reports and to reduce the scroll in our rendered `.html` reports, without having to hideaway important information (like diagnostics) in a supplementary report, along with *forcing* (is that too strong?) the reader to engage with the raw data (and it's distribution) a little before just seeing the model output. 

We acknowledge, this is still a work in progress.

### Pros

+ Concise code and concise report output
+ Maintain ready access to the model and the data (for additional processing if required)
+ Reduce indecision (ad nauseam) over how to format your model output (which package to use)

### Cons

+ Multiple copies of the dataset are create, which will be problematic with large data
+ Limited functionality as it relates to different (more complex) model types
+ Yet another function to learn and engage with

Our view, again as it speaks to the motivation here, is that we are often run these sorts of models, they may not even be our final model but they may be informative on the pathway to specifying the final model. And during that process, there is a lot value in having all this output structured and readily available.

## Accessing the function

The above two functions (`thekids_model` and `thekids_model_output`) are now available in our package `thekidsbiostats`, which you [can install]() by running the following code:

```{r echo=TRUE, execute = F}
#| code-fold: false
remotes::install_github("The-Kids-Biostats/thekidsbiostats")
```

<<<<<<< Updated upstream:posts/DRAFT_likert_visualisation/likert_visualisations.qmd
And, we might also like to table some of the 'change' data behind this plot, using our favourite package *(to battle with)* `gtsummary`.
=======
The help documentation (`?thekids_model`) is there to walk you through the relevant arguments.
>>>>>>> Stashed changes:posts/DRAFT_model_function/model_function.qmd

# Next steps

In line with some of the thoughts in [this previous post](https://the-kids-biostats.github.io/posts/2024-11-19_code_v_functions/code_v_functions.html)), we are only in the early stages of turning this code into a truly generic function. We have, for some time, been using modified 'project specific' versions of this function (or a version of this function - often with marginal effect estimates embedded). However as noted, currently this wrapper function only works with basic linear regression models. 

We have plans to add (at least) the following functionality:

+ The handling logistic regression, negative binomial regression, and quantile regression models,
+ The handling multiple models at the same time (for example two models with different sets of covariates),
+ The passing additional arguments through to the functions used within our functions (e.g., `exp = T`), and
+ Add increased (and automated) narration (of the output).

## Comments

The above isn't perfect, one could argue that there is no need to duplicate the figure headings and the legend could be handled better. Is a figure ever perfect? 

This figure does show all the raw data (counts and percentages), clearly delineates the pre and post data, gives some idea of the flow of data between levels, and highlights that in the post period, the intervention group comprised a higher proportion of level 5 responses. Combined with the table that shows the actual proportional movements from each pre (baseline) group - and we're getting somewhere.

# Bidirectional

## Demo data

```{r}
# Set some simulation parameters
set.seed(123)  # For reproducibility
 
# Parameters
q   <- 10         # Number of Likert-scale questions
n_i <- 165        # Number of intervention respondents
n_c <- 123        # Number of control respondents
n   <- n_i + n_c  # Total number of participants
 
# Define Likert scale labels
likert_labels <- c("Strongly disagree", "Disagree", "Neutral", "Agree", "Strongly agree")
 
# Simulate pre-survey responses (randomly sampled from the Likert scale 1-5)
pre <- matrix(sample(1:5, n * q, replace = TRUE), 
              nrow = n, ncol = q)
 
# Function to simulate post-survey responses with both improvement and decline possibilities
simulate_post <- function(pre_response) {
  # Define possible changes with corresponding probabilities
  possible_changes <- c(-3, -2, -1, 0, 1, 2, 3)
  probabilities <- c(0.05, 0.1, 0.15, 0.4, 0.15, 0.1, 0.05)  # "No change" is most likely
  post_response <- pre_response + sample(possible_changes, 
                                         1, 
                                         prob = probabilities)
  # Ensure post_response remains within the bounds of the Likert scale (1 to 5)
  post_response <- max(1, min(5, post_response))
  return(post_response)
}
 
# Simulate post-survey responses
post <- apply(pre, 2, function(x) sapply(x, simulate_post))
 
# Convert numeric values to factors with labels
pre <- apply(pre, 2, factor, levels = 1:5, labels = likert_labels)
post <- apply(post, 2, factor, levels = 1:5, labels = likert_labels)
 
# Combine the pre and post data
dat_likert <- data.frame(id = 1:n,
                         mode = c(rep("Intervention", n_i), rep("Control", n_c)),
                         pre,
                         post)
 
# Rename the columns to reflect pre and post data
colnames(dat_likert)[3:(2 + q)] <- paste0("Q", 1:q, "_pre")
colnames(dat_likert)[(3 + q):(2 + 2 * q)] <- paste0("Q", 1:q, "_post")
 
dat_likert <- dat_likert %>%
  as_tibble() %>%
  mutate(across(contains("Q"), ~factor(., likert_labels)))
 
rm(n, n_i, n_c, q, likert_labels, pre, post)
```


```{r}
dat_likert <- dat_likert %>% 
  mutate(mode = case_when(mode == "Control" ~ "Control",
                          T ~ mode))
head(dat_likert[, c(1, 2, 3, 13, 4, 14)], 5) %>% 
  thekids_table(colour = "Saffron", padding = 3)
```

## Visualisation


```{r}
likert_plot <- function(data, 
                        variables,
                        grouping = NULL,
                        centered = FALSE,
                        plot.percent.low = FALSE, 
                        plot.percent.high = FALSE, 
                        plot.percent.neutral = FALSE,
                        legend.position = "right",
                        plot.percents= TRUE,
                        legend_title = "Response",
                        legend_reverse = FALSE,
                        str_width = 40,
                        facet_ncol = 1){
  dat_plot <- data %>%
    as.data.frame()  
  
  likert_object <- likert(dat_plot %>% 
                            select(!!variables),grouping = dat_plot[[grouping]])
  
  likert.bar.plot(likert_object,
                  centered = centered,
                  plot.percent.low = plot.percent.low, 
                  plot.percent.high = plot.percent.high, 
                  plot.percent.neutral = plot.percent.neutral, 
                  legend.position = legend.position, 
                  plot.percents = plot.percents) +
    guides(fill = guide_legend(title = "Response",
                               reverse = TRUE
                               )) +
    geom_hline(yintercept = 50, linetype = "dashed", colour = "red") +
    theme_institute(base_size = 16) +
    scale_fill_manual(values = rev(c("#f56b00", "#fab580", "#eeefef","#a5ccef", "#4a99de")))
}
```


```{r fig.width = 10, fig.height = 5}
#| column: body-outset
dat_likert[, c(1, 2, 3, 13, 4, 14)] %>% # CHECK CHECK CHECK
    pivot_longer(cols = contains("Q"), 
                 names_to = c("question", "time"), 
                 names_sep = "_", 
                 values_to = "value") %>%
  mutate(time = case_when(time == "pre" ~ "Pre",
                          T ~ "Post")) %>% 
    pivot_wider(id_cols = c(id, mode, time), 
                names_from = question, 
                values_from = value) %>%
    mutate(across(contains("Q"), ~forcats::fct_rev(.))) %>%
    likert_plot(data = .,
                variables = paste0("Q", 1),
                grouping = "time") +
    labs(title = "f") +
    theme(plot.title = element_text(family = "Barlow",
                                    size = 18))


# CALCULATE THE MIDPOINTS AND PLOT LABEL - NOT WORKING
# 
# dat_l_labs <- dat_likert[, c(1, 2, 3, 13)] %>%
#   pivot_longer(cols = contains("Q"), 
#                names_to = c("question", "time"), 
#                names_sep = "_", 
#                values_to = "value") %>% 
#   group_by(mode, question, time) %>%
#   count(value) %>%
#   mutate(freq = n / sum(n),
#          per = paste0(round(freq * 100, 1), "%"),
#          cum_freq = cumsum(freq),                  # Cumulative sum of frequencies
#          midpoint = cum_freq - (freq / 2)) 
#
# geom_text(data = dat_l_labs, 
#            aes(y = midpoint, label = per, group = value)) 
```


```{r}
#| column: body-outset
dat_likert %>%
  select(id, mode, Q1_pre, Q1_post) %>%
  mutate(across(contains("Q"), ~case_when(. == "Strongly disagree" ~ 1,
                                          . == "Disagree" ~ 2,
                                          . == "Neutral" ~ 3,
                                          . == "Agree" ~ 4,
                                          . == "Strongly agree" ~ 5))) %>%
  mutate(across(ends_with("_pre"), 
                .names = "{.col}_change",
                .fns = ~biometrics::fct_case_when(
                  get(sub("_pre", "_post", cur_column())) < . ~ "Decreased",
                  get(sub("_pre", "_post", cur_column())) == . ~ "No change",
                  get(sub("_pre", "_post", cur_column())) > . ~ "Increased"
                ))) %>%
  select(id, mode, contains("_change")) %>%
  left_join(dat_likert %>% select(id, mode, Q1_pre), by = c("id", "mode")) %>%
  select(-id) %>%
  
  tbl_strata(strata = mode, 
             .tbl_fun = ~.x %>% 
               tbl_summary(by = Q1_pre,
                           label = list(Q1_pre_change ~ "Change")) %>%
               modify_header(all_stat_cols() ~ "**{level}**"),,
             .combine_with = "tbl_stack") %>%
  thekids_table(colour = "Saffron", padding = 3) 
```


## Comments


# Closing comments

<<<<<<< Updated upstream:posts/DRAFT_likert_visualisation/likert_visualisations.qmd

# Acknowledgements

Thanks to Wesley Billingham for providing feedback on and reviewing this post.

You can look forward to seeing posts from these other team members here in the coming weeks and months.
=======
The `thekids_model` function marks a step forward (at least for us) in streamlining how we present model output, improving both code efficiency and report clarity. By balancing aesthetics with accessibility, we aim to make diagnostic checks and key outputs seamlessly available without overwhelming the reader. While there’s still room to expand the functions functionality, we believe our approach provides a solid foundation to build upon (without overreaching).

We’d love to hear your thoughts or suggestions for how we could refine this function further.

# Acknowledgements

Thanks to Zac Dempsey and Dr Elizabeth McKinnon for providing feedback on and reviewing this post.
>>>>>>> Stashed changes:posts/DRAFT_model_function/model_function.qmd

## Reproducibility Information

To access the .qmd (Quarto markdown) files as well as any R scripts or data that was used in this post, please visit our GitHub:

<https://github.com/The-Kids-Biostats/The-Kids-Biostats.github.io/tree/main/posts/>

The session information can also be seen below.

```{r echo = T}
sessionInfo()
```
