---
title: "An Overview of our R Package: 'thekidsbiostats'"
author: "Wesley Billingham"
format:
  html:
    tabset: true
    toc: true
    toc-location: left
date: "2025-01-23"
categories:
  - R
  - Summary
draft: false
---

```{r setup, include=FALSE}
# knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(tidyverse))
suppressMessages(library(Hmisc))
suppressMessages(library(thekidsbiostats))
suppressMessages(library(kableExtra))
#library(gtsummary)
#library(summarytools)
#library(desctable)
#library(tableone)
```

# Overview

We created a package!

A major attraction of the R programming language is its vast library of free packages, which can be found on both CRAN (the Comprehensive R Archive Network) or hosted on other sites such as GitHub. These packages can provide ready-made functions, datasets and/or templates for all kinds of applications (some staggeringly niche). In the field of statistics and data analysis, it is rare to encounter any methodology, model and/or algorithm which has not also been implemented somewhere in some R package.

Packages can also be easily developed for use within teams or individual use, to automate or simplify tasks which appear often.

## What does `thekidsbiostats` do?

In summary, the package provides:

1.  Functions to automate and/or simplify regular/routine tasks in our workflow.
2.  Functions and Quarto templates which apply consistent formatting and theming to documents, ggplots, tables, etc.

A complete list of functions, with brief descriptions, is found in the table below. The rest of this post will provide some worked examples for many of the functions in this list.

```{r echo = F, message=FALSE}
data.frame(
  Function = ls("package:thekidsbiostats")[c(2:4, 7:11, 14:15, 18:20)],
  Description = c(
    "Cleans REDCap data exports by applying factor levels and converting column classes per a REDCap data dictionary.",
    "Creates a folder structure for a new project, as well as an R Project file and basic R scripts. [Example](#eg_create_project).",
    "Creates a Quarto document from one of several template (extention) choices. [Example](#eg_create_template).",
    "Like dplyr::case_when but the output variable is of class factor, ordered based on the order entered into the case_when statement. [Example](#eg_fct_case_when).",
    "Rounds all numeric columns in a data frame or tibble, preserving trailing zeroes. [Example](#eg_round).",
    "Rounds all values in a vector, preserving trailing zeroes. [Example](#eg_round).",
    "ggplot scale_color theme for applying \"The Kids\"-themed colours.",
    "ggplot scale_fill theme for applying \"The Kids\"-themed colours.",
    "Generates a collection of informative model output in a structured list when provided data and model specification. [Example](#eg_thekids_model).",
    "Generates a collection of informative model output in a structured list when provided with an existing model object.",
    "Creates a formatted flextable with \"The Kids\" themed colours and fonts. [Example](#eg_thekids_table).",
    "Applies \"The Kids\" theme to a ggplot object, including colours, fonts and changes to other elements for a cleaner look. [Example](#eg_thekids_theme).",
    "Like thekids_theme, but for historical projects completed using the Telethon Kids Institute style guide."
  ) 
) %>% thekids_table(colour = "Saffron") %>%
  ftExtra::colformat_md(j = "Description")
```

::: callout-note
While the formatting functions and templates are designed for The Kids Research Institute Australia (TKRIA) within the guidelines of its style guide, they should be readily adjustable for use in other contexts with changes to specific fonts, colours, etc.
:::

## How to Install the Package

The package (and all of its code!) are available here: <https://github.com/The-Kids-Biostats/thekidsbiostats>.

If you would like to follow along with the examples below, simply run the code below:

```{r echo = T, eval = F}
remotes::install_github("https://github.com/The-Kids-Biostats/thekidsbiostats")

library(thekidsbiostats)
```

# Examples

## Helper Functions

### `create_project` {#eg_create_project}

This is the first function called when we begin a new project. It creates a folder structure based on parameters it is given, and an R Project file. The real power of this function comes from the `ext_name` parameter, which allows various templates (or 'extensions') to be used for the project. So far, we have a 'basic' extension and a 'targets' extension (which adds files and folders used by the [`targets`](https://cran.r-project.org/web/packages/targets/index.html) package). Other extensions are in the works for specific types of projects.

Upon calling `create_project()`, a pop-up will appear allowing the user to choose where the new project should be located:

```{r eval = F, echo = T}
create_project(project_name = "package_demo", ext_name = "targets",
               docs = F)
```

![](project1.PNG)

In this instance, we create a project called "package_demo". Both the project directory and the R project (.Rproj) file take this name. We choose the "targets" extension, which means our directory starts with a "\_targets.R" file and a "scripts" folder (had we chosen the "basic" extension, neither of these objects would be created).

![](project2.PNG)

Additionally, the function has the *data*, *data-raw*, *admin*, *reports* and *docs* parameters. These can be set to either TRUE or FALSE to include these folders in the project directory or not (default for all is TRUE). Note that we set "docs" to FALSE and so it does not appear in our directory above.

The "reports" directory created by `create_project()` is the default location for Quarto templates to be placed when calling `create_template()`, which we look at now...

### `create_template` {#eg_create_template}

The purpose of `create_template()` is to generate ready-to-populate Quarto templates with "The Kids styling" already applied. Two templates are possible using the `ext_name` parameter: html and word, corresponding to the report format that we desire.

We can call it below, telling it to create the document in the "package_demo/reports" folder we created using `create_project()` above.

```{r message = F, message = F, eval = F}
create_template(file_name = "demo_report", directory = "package_demo/reports/")
```

The resulting quarto document looks like this:

![](report1.PNG) ![](report2.PNG)

And rendered:

![](report3.PNG)

### `thekids_model` {#eg_thekids_model}

We have a dedicated [post](https://the-kids-biostats.github.io/posts/2025-01-10_model_function/model_function.html) exploring the use of `thekids_model`.

Briefly, this function provides a standardised list of outputs for commonly used models in R. This includes the model itself, diagnostics, marginal means, and clean tables of typical model output (coefficients, confidence intervals, p-values etc). The above blog post details exactly how to display these nicely in a Quarto html document.

### `round_vec` and `round_df` {#eg_round}

These two functions are examples where the sole purpose is keep code concise and to the point. Often when we present figures whether it is in plots, tables or in written form, we wish to preserve trailing zeroes when rounding numbers to a x decimal places.

Below we demonstrate the difference between the base R `round()` and `round_vec()` when rounding to decimal places.

```{r echo = F}
original <-  c(1.8003, 1.9998, 2.5812)

x <- round(original, 2)
y <- round_vec(original, 2)

data.frame(
  original = original,
  round = as.character(x),
  round_vec = y
) %>%
  thekids_table(colour = "Saffron")
```

`round_vec()` consistently has 2 decimal places, whereas `round()` drops any trailing zeroes, which is often undesirable for presentation.

`round_df()` can be called on a data frame or tibble to round every numeric column in that object at once.

### `fct_case_when` {#eg_fct_case_when}

In a similar vein to the above function, `fct_case_when` is essentially `dplyr::case_when` but with one handy addition: the resulting vector is a factor where the levels are ordered in the same order they are defined within the case_when statement.

The factor levels are the result of the default `case_when()` function combined with `as.factor()`, and are simply ordered alphabetically.

```{r}
x <- 1:50
case_when(
  x %% 35 == 0 ~ "fizz buzz",
  x %% 5 == 0 ~ "fizz",
  x %% 7 == 0 ~ "buzz",
  TRUE ~ "everything else"
) %>% as.factor %>% levels
```

In comparision, `fct_case_when()` orders the factor levels based on the order of their appearance in the argument:

```{r}
x <- 1:50
thekidsbiostats::fct_case_when(
  x %% 35 == 0 ~ "fizz buzz",
  x %% 5 == 0 ~ "fizz",
  x %% 7 == 0 ~ "buzz",
  TRUE ~ "everything else"
) %>% levels
```

::: callout-tip
This is really handy for ensuring variables appear in the desired order rather than alphabetical, without the need for double handling!
:::

## Theming

Using functions that automatically apply a set of formatting options to plots and tables saves time, allowing us to focus on the analysis and interpretation. Code also looks a lot cleaner when those 10 lines of ggplot per plot are automated away. Importantly, these functions also ensure a polished and consistent appearance across our team, so that output looks the same irrespective of who generated it.

### `thekids_theme` {#eg_thekids_theme}

The `thekids_theme()` function applies consistent theming to ggplot2 visualizations. It uses a clean, minimal aesthetic with fonts and colors that align with The Kids branding. Hereâ€™s an example of a plot before themeing:

```{r}
ggplot(mtcars, aes(x = mpg, y = wt, col = factor(cyl))) +
  geom_point(size = 3) +
  labs(x = "Miles per Gallon", y = "Weight", col = "Cylinders")
```

```{r}
ggplot(mtcars, aes(x = mpg, y = wt, col = factor(cyl))) +
  geom_point(size = 3) +
  labs(x = "Miles per Gallon", y = "Weight", col = "Cylinders") +
  thekids_theme()

```

### `thekids_table` {#eg_thekids_table}

`thekids_table()` produces tables styled with The Kids branding and is powered by the `flextable` package. This includes by default applying the Barlow font, compact formatting (our preference!), and zebra-striping for readability, though these can all be altered/disabled via parameters.

For example, a raw table output from the mtcars dataset looks like this:

```{r}
head(mtcars, 5)
```

Now, applying `thekids_table()` transforms it into a clean, visually appealing format with branding elements:

```{r}
head(mtcars, 5) %>%
  thekids_table(colour = "Saffron", font.size = 10)

```

This outputs a compact, zebra-striped table ready for inclusion in Word or HTML reports. However, the *padding* and *striped* options can be changed if we would prefer some more space without any stripes:

```{r}
head(mtcars, 5) %>%
  thekids_table(colour = "Saffron", font.size = 10, padding = 4, striped = F)
```

Both `thekids_theme()` and `thekids_table` provide a host of options via parameters given to the functions.

::: callout-note
If we wish to use only the colours for any reason (such as some non-ggplot visualisation that accepts a colour argument) we can access them directly:

```{r}
thekidsbiostats::thekids_colours
```
:::

# Conclusions

The `thekidsbiostats` package significantly simplifies repetitive tasks, standardises formatting, and speeds up workflows. While tailored for use at The Kids Research Institute Australia, many of its features can be readily adapted to other contexts, providing a ready-to-go framework for data analysis and reporting.

There are plenty of arguments we didn't go other in the this post, however they are all described in the [documentation](https://github.com/The-Kids-Biostats/thekidsbiostats/tree/main/man).

We hope you'll give the package a try and find some or all of the functions useful in your own workflow. Please feel free to contact us at biostatistics\@thekids.org.au (or raise an issue on our [Github repository](https://github.com/The-Kids-Biostats/thekidsbiostats)) if you encounter any bugs or would like to suggest additional features for any of our functions.

## Acknowledgements

Thanks to Matt Cooper, Zac Dempsey and Elizabeth McKinnon for providing feedback on and reviewing this post.

### AI Usage Note

The majority of this post and code were produced by the author. AI tools were used to refine the structure and wording.

## Reproducibility Information

To access the .qmd (Quarto markdown) files as well as any R scripts or data that was used in this post, please visit our GitHub:

<https://github.com/The-Kids-Biostats/The-Kids-Biostats.github.io/tree/main/posts/>

The session information can also be seen below.

```{r echo = T}
sessionInfo()
```
