---
title: "Summary Tabling in R"
author: "Zac Dempsey"
format:
  html:
    code-fold: true
    tabset: true
    toc: true
    toc-location: left
date: "2024-07-01"
categories:
  - R
  - Summary
draft: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
suppressMessages(library(tidyverse))
suppressMessages(library(Hmisc))
#library(gtsummary)
#library(summarytools)
#library(desctable)
#library(tableone)
```

# Overview

Analysing data will normally always involve generating tables– whether they are the final goal of the analysis or used as an intermediary step to guide further analysis. This blog post will focus on the former, while keeping the latter in the back of our minds. Common use cases might be a "Table 1" in a randomised control trial setting where we are describing (not testing and generating p-values) a range of summary statistics for each arm of the trial, or perhaps presenting summary statistics for a longitudinal data set across multiple time periods.

There are *many* `R` packages and functions dedicated to this very task. We will select just a handful that we often come across in our work, and evaluate their effectiveness relative to some criteria we deem important. Example code and commentary will be presented as we go.



# Assessment Criteria

1.  **Range of customisible summary options**
    -   How flexible are the summary functions to different metrics (mean, median, SD, IQR)?
    -   How easy is it to apply these changes to different data types (e.g., continuous, dichotomous, ordinal, nominal).
2.  **Flexibility in changing tabling output**
    -   Text formatting (italics, bolding, font size, etc.)
    -   Specifying order for table elements
    -   Rounding
3.  **Rendering across different output types**
    -   Are the outputs robust with respect to output form (html, pdf, word)?



# Contenders

Let's define our set of contenting packages. Keep in mind this is not an exhaustive list of all summary and tabling functions – we select only a few that we often use or come across in our work. Any function is considered that is capable of presenting a formatted summary table in html, pdf and/or Word form. Therefore, the various summary tabling functions that print output to console (e.g., `Hmisc::describe`) are not considered.

-   [`gtsummary::tbl_summary`](https://www.danieldsjoberg.com/gtsummary/)
-   [`table1::table1`](https://cran.r-project.org/web/packages/table1/vignettes/table1-examples.html)
-   [`tableone::CreateTableOne`](https://cran.r-project.org/web/packages/tableone/vignettes/introduction.html)
-   [`desctable::desc_table`](https://cran.r-project.org/web/packages/desctable/vignettes/desctable.html)
-   [`summarytools::dfSummary`](https://rdrr.io/cran/summarytools/man/dfSummary.html)

# Data

## Sample Dataset

We select the `flchain` dataset from the `survival` package to evaluate each summary table package's performance. This is dataset containing the serum free light chains for 7874 subjects, and contains a variety of common variable types (dichotomous, ordinal, nominal, numeric).

```{r}
data(flchain, package = "survival")

head(flchain)
str(flchain)
```



To summarise these variable types:

+---------------+------------------+
| Continuous    | -   `age`        |
|               | -   `kappa`      |
|               | -   `lambda`     |
|               | -   `futime`     |
|               | -   `creatinine` |
+---------------+------------------+
| Ordinal       | -   `sample.yr`  |
|               | -   `chapter`    |
+---------------+------------------+
| Dichotomous   | -   `death`      |
|               | -   `mgus`       |
+---------------+------------------+
| Nominal       | -   `sex`        |
|               | -   `flc.grp`    |
+---------------+------------------+



## Evaluation Criteria

Below, we detail the framework we will use to evaluate each summary table function. These elements span technical/statistical elements, formatting and output.

-   Stratify results by `sex`.
-   Report median (interquartile range) for `age` and mean (standard deviation) for all other continuous (numeric) variables.
-   Apply level specifications to ordinal variables (`sample.yr`).
-   Round continuous values to 1 decimal place.
-   Apply nicely formatted labels to all variables.
-   Apply basic statistical to quantify any differences between the stratified death groups.
    -   Chi-square test for categorical variables.
    -   Kruskal-Wallis test for continuous variables.
-   Add overall summary statistics across all levels of the stratification variable.
-   Render in html, pdf and word and compare consistency across these.

::: callout-note
We will report if any of the above are not feasibly possible under using the in-built functionalities of the pacakge. Comments will also be made on the quality of the documentation for each package and the wealth of online support through StackOverflow, blogs, tutorials, etc.
:::


# 1) `gtsummary::tbl_summary`

## i) Render table

-   Required data structure:
    -   In general, `tbl_summary` requires data in **long format**.
    -   "Columns" in the output are defined by use of the `by =` argument.
    -   "Rows" in the output are defined by columns in the input data set.
    -   All variables included in the input data are, by default, included in the output. Therefore, the user must select/un-select columns pursuant to what is required.

```{r echo = T}
suppressWarnings(library(gtsummary))

sumtab1 <- flchain %>%
  mutate(death = case_match(death, 
                          0 ~ "Alive at last contact date", 
                          1 ~ "Dead"),
         sex = case_match(sex,
                          "F" ~ "Female",
                          "M" ~ "Male")) %>%
  
  gtsummary::tbl_summary(by = "death",
                         digits = list(all_categorical() ~ c(0, 1),
                                       all_continuous() ~ 1),
                         statistic = list(all_continuous() ~ "{mean} ({sd})",
                                          age ~ "{median} ({p25}, {p75})"),       
                         label = list(sample.yr ~ "Sample Year",
                                      sex ~ "Sex",
                                      age ~ "Age (years)",
                                      kappa ~ "Serum free light chain: kappa portion",
                                      lambda ~ "Serum free light chain: lambda portion",
                                      flc.grp ~ "FLC group",
                                      creatinine ~ "Serum creatinine",
                                      mgus ~ "Monoclonal gammapothy diagnosis",
                                      futime ~ "Time from enrolment until death (days)",
                                      chapter ~ "Primary cause of death")) %>%
  gtsummary::add_overall(last = TRUE)
```

## ii) Output table


```{r echo = F}
sumtab1
```

## iii) Comments

-   **Pros**
    -   Variety of function parameters to customise the output of table.
    -   Renders nicely to html, Word format.
    -   Can easily convert to `flextable` object, where a full suite of visual formatting options are possible.
    -   Extensive documentation, worked examples and online examples.
-   **Cons**
    -   The syntax of function arguments can be a learning curve (correct list/vector notation).
    -   When applying multiple tests within a class of variables (e.g., t-test for one continuous variable, Kruskal-Wallis test for another) it is not obvious which test is applied to which. Only the p-value is returned in each instance.
    -   Can be *slow* for large/complex data sets.



# 2) `table1::table1`

## i) Render table

```{r}
suppressMessages(suppressWarnings(library(table1)))

flchain_mod <- flchain

# Re-code categorical variable levels
flchain_mod <- flchain_mod %>%
  mutate(sex = case_match(sex, 
                          "F" ~ "Female", 
                          "M" ~ "Male"),
         mgus = case_match(mgus, 
                           0 ~ "No", 
                           1 ~ "Yes"),
         death = case_match(death, 
                            0 ~ "Alive at last contact date", 
                            1 ~ "Dead"),
         sample.yr = as_factor(sample.yr))

# Custom rendering function to apply formatting to table
rndr <- function(x, name, ...) {
  if (!is.numeric(x)) 
    return(table1::render.categorical.default(x, 
                                              na.is.category = FALSE,
                                              digits.pct = 1
                                              ))
  
  sum_stats <- if (name %in% c("age")){
    "Median [Q1, Q3]"
  } else {
    "Mean (SD)"
  }
  table1::parse.abbrev.render.code(c("", sum_stats))(x)
}

# Specify variable labels
label(flchain_mod$age)        <-"Age (years)"
label(flchain_mod$sex)        <- "Sex"
label(flchain_mod$sample.yr)  <- "Sample Year"
label(flchain_mod$kappa)      <- "Serum free light chain: kappa portion"
label(flchain_mod$lambda)     <- "Serum free light chain: lambda portion"
label(flchain_mod$flc.grp)    <- "FLC group"
label(flchain_mod$creatinine) <- "Serum creatinine"
label(flchain_mod$mgus)       <- "Monoclonal gammapothy diagnosis"
label(flchain_mod$futime)     <- "Time from enrolment until death (days)"
label(flchain_mod$chapter)    <- "Primary cause of death"

# Specify table output
sumtab2 <- flchain_mod %>%
  table1::table1(~. | death, 
                 data = .,
                 overall = c(right = "Overall"),
                 #extra.col = list(`p-value` = pvalue),
                 render = rndr # Call the custom rendering function from above
                 )
```

## ii) Output table

```{r echo = F}
sumtab2
```

```{r}
#sumtab2_table1 <- sumtab2 %>%
#  flextable::as_flextable()

#officer::read_docx() %>%
#  flextable::body_add_flextable(sumtab1_word) %>%
#  print(target = "sumtab1.docx")
```

## ii) Comments

+ **Pros**
  + 
+ **Cons**
  + "Formula-style" specification of the table is somewhat cumbersome.
  + Specifying labels to variables must be done outside of any tabling pipelines.
  + The specification of variable levels must be done outside of any tabling pipelines.
  + All formatting must be done in a custom rendering function.
    + Specifying this rendering function is not necessarily straightforward, relying still on specific functionalities of the `table1` package.

# 3) `tableone::CreateTableOne`

## i) Render table

```{r echo = T}
suppressWarnings(library(tableone))

flchain_mod <- flchain %>%
  mutate(sex = case_match(sex, 
                          "F" ~ "Female", 
                          "M" ~ "Male"),
         mgus = case_match(mgus, 
                           0 ~ "No", 
                           1 ~ "Yes"),
         death = case_match(death, 
                            0 ~ "Alive at last contact date", 
                            1 ~ "Dead"))

# Specify variable labels
label(flchain_mod$age)        <- "Age (years)"
label(flchain_mod$sex)        <- "Sex"
label(flchain_mod$sample.yr)  <- "Sample Year"
label(flchain_mod$kappa)      <- "Serum free light chain: kappa portion"
label(flchain_mod$lambda)     <- "Serum free light chain: lambda portion"
label(flchain_mod$flc.grp)    <- "FLC group"
label(flchain_mod$creatinine) <- "Serum creatinine"
label(flchain_mod$mgus)       <- "Monoclonal gammapothy diagnosis"
label(flchain_mod$futime)     <- "Time from enrolment until death (days)"
label(flchain_mod$chapter)    <- "Primary cause of death"


sumtab3 <- flchain_mod %>%
  sjlabelled::label_to_colnames() %>%
  tableone::CreateTableOne(data = .,
                           strata = "death", 
                           test = FALSE,
                           factorVars = c("sex", "sample.yr", "flc.grp", "mgus", "chapter"),
                           addOverall = TRUE)

mean_sd <- function(x) c(mean = mean(x, na.rm = TRUE), sd = sd(x, na.rm = TRUE))
summary_stats <- list(age = function(x) c(median = median(x, na.rm = TRUE), 
                                          IQR = IQR(x, na.rm = TRUE)),
                      kappa = mean_sd,
                      lambda = mean_sd,
                      creatinine = mean_sd,
                      futime = mean_sd
                      )

sumtab3 <- print(sumtab3,
      showAllLevels = TRUE,
      nonnormal = names(summary_stats),
      contStats = summary_stats,
      digits = 1,
      quote = FALSE,
      noSpaces = TRUE,
      printToggle = FALSE) %>%
  knitr::kable(., format = "html")
```

## ii) Output table

```{r echo = F}
sumtab3
```

## iii) Comments

-   **Pros**
    -   Implicitly tests each variable for appropriateness of test (e.g., normal vs. non-normal etc.)
-   **Cons**
    -   Clunky and difficult to customise output -- requires specifying custom functions.
    -   Clunky to specify testing
        -   Cannot easily tell which test is being applied to which variable (cannot tell whether variable is "normal" vs. "non-normal")
        -   Different arguments specified for approximate vs. exact categorical tests (chi-square vs. Fisher's test) and normal vs. non-normal continuous tests (t-test vs. Kruskal-Wallis Rank-Sum test)
    



# 4) `desctable::desc_table`

## i) Render table

```{r echo = T}
labels <- list(sample.yr  = "Sample Year",
               sex        = "Sex",
               age        = "Age (years)",
               kappa      = "Serum free light chain: kappa portion",
               lambda     = "Serum free light chain: lambda portion",
               flc.grp    = "FLC group",
               creatinine = "Serum creatinine",
               mgus       = "Monoclonal gammapothy diagnosis",
               futime     = "Time from enrolment until death (days)",
               chapter    = "Primary cause of death")

sumtab4 <- flchain %>% 
  mutate(sample.yr = factor(sample.yr)) %>%
  group_by(death) %>%
  desctable::desc_table(data = .,
                        .labels = labels) %>% #,
                        #"N"    = length,
                        #"Min"  = min,
                        #"Q1"   = ~quantile(., .25),
                        #"Med"  = median,
                        #"Mean" = mean,
                        #"Q3"   = ~quantile(., .75),
                        #"Max"  = max,
                        #"sd"   = sd,
                        #"IQR"  = IQR,
                        #labels = list(
                        #      sample.yr = "Sample Year",
                        #      sex = "Sex",
                        #      age = "Age (years)",
                        #      kappa = "Serum free light chain: kappa portion",
                        #      lambda = "Serum free light chain: lambda portion",
                        #      flc.grp = "FLC group",
                        #      creatinine = "Serum creatinine",
                        #      mgus = "Monoclonal gammapothy diagnosis",
                        #      futime = "Time from enrolment until death (days)",
                        #      chapter = "Primary cause of death"
                        #    )) #%>%
  desctable::desc_output("DT")
```

## ii) Output table

```{r echo = F}
sumtab4
```

## iii) Comments

-   **Pros**
    -   Interactive table, enabling quick/easy sorting of summary statistics.
    -   Can copy output directly to clipboard, Excel.
-   **Cons**
    -   Must specify grouping variables outside of the `desctable` environment -- returning one very wide table per group.
    -   Returns a relatively large and *sparse* summary table (with both continuous and categorical variables), with one column allocated to each summary statistic. Can lead to a lot of white space.
    -   Relatively inflexible specification of *different summary statistics* for *different variables of the same type*. For example, the mean, median, minimum and maximum values are returned for all continuous variables.
    -   Is slooow.
    -   Specification of tests are a little clunky and troublesome with categorical factors.

# 5) `summarytools::dfSummary`

## i) Render table

```{r echo = T, results = "asis", cache = FALSE}
flchain_mod <- flchain

label(flchain_mod$age)        <- "Age (years)"
label(flchain_mod$sex)        <- "Sex"
label(flchain_mod$sample.yr)  <- "Sample Year"
label(flchain_mod$kappa)      <- "Serum free light chain: kappa portion"
label(flchain_mod$lambda)     <- "Serum free light chain: lambda portion"
label(flchain_mod$flc.grp)    <- "FLC group"
label(flchain_mod$creatinine) <- "Serum creatinine"
label(flchain_mod$mgus)       <- "Monoclonal gammapothy diagnosis"
label(flchain_mod$futime)     <- "Time from enrolment until death (days)"
label(flchain_mod$chapter)    <- "Primary cause of death"

sumtab5 <- flchain %>%
  group_by(death) %>%
  summarytools::dfSummary(round.digits = 2,
                          varnumbers = FALSE,
                          na.col = TRUE,
                          style = "multiline",
                          plain.ascii = FALSE, # Recommended when rendering to markdown
                          headings = FALSE, 
                          labels.col = TRUE
                          ) %>%
  base::print(., method = "render")
```

## ii) Output table

```{r echo = F}
sumtab5
```

## iii) Comments

-   **Pros**
    -   Returns a nice visual distribution of the data.
-   **Cons**
    -   A bit fiddly to render nicely in RMarkdown. Requires specification of additional arguments in chunk header (`results = asis`).
    -   Stratification is clunky in output and requires manually specifying a `group_by` argument. Also returns two separate summary tables.
    -   No ability to customise the summary statistics presented for each variable.



# Conclusions

Overall, the `gtsummary::tbl_summary` is the best summary table function out of those explored in this blog. In general, the range of in-built parameters and helper functions allows for the greatest flexibility in producing a relatively publication-ready summary table. 



## Acknowledgements

Thanks to Wesley Billingham, Matt Cooper, and Elizabeth McKinnon for providing feedback on and reviewing this post.

You can look forward to seeing posts from these other team members here in the coming weeks and months.

## Reproducibility Information

To access the .qmd (Quarto markdown) files as well as any R scripts or data that was used in this post, please visit our GitHub:

<https://github.com/The-Kids-Biostats/The-Kids-Biostats.github.io/tree/main/posts/>

The session information can also be seen below.

```{r echo = T}
sessionInfo()
```