---
title: "Large-scale projects"
author: "Bethy McKinnon and Matt Cooper"
date: "`r format(Sys.time(), '%d %B %Y')`"
format:
  html:
    code-fold: true
    tabset: true
    toc: true
    toc-location: left
    number-depth: 1
    grid:
      sidebar-width: 220px  # default 250px
      body-width: 800px  # default 800 px
      margin-width: 280px    # default 250px    
categories:
  - R
  - Modelling
  - Quarto
draft: true
editor_options: 
  chunk_output_type: console
execute:
  echo: false
  warning: false 
fig-align: center
fig-format: png
fig-cap-location: bottom
fig-cap-align: center
tbl-cap-location: bottom
fig-title: Figure # this is actually the default, but an alternative label prefix can be specified here
number-sections: true
crossref:  
  chapters: true   # Enables table/figure labelling by sections/chapters
css: MyStyles.css  # Used to define look of the call-outs
---

# Overview

```{r}
library(thekidsbiostats) # install with remotes::install_github("The-Kids-Biostats/thekidsbiostats")
```

A recent collaboration led by Dr Melissa Licari of The Kids produced a summary report detailing the challenges faced by individuals (and the families that care for them) living with Tourette syndrome and other tic disorders (https://www.thekids.org.au/impactfortourettes).  The report can be found \[here\](https://www.thekids.org.au/impactfortourettes).

The report was a summary of results of a national survey undertaken in 2023/2024, and the data analysis and preparation of figures for publication was undertaken by the Biostatistics team at The Kids.

To support production of the final publication there was considerable behind-the-scenes work, including various challenges common to a large-scale project such as this, where there are many variables and outcomes of interest. For example:

-   Survey coverage of 7 specific impact domains, being comprised of existing validated questionnaires as well as bespoke questions, and including multiple response types (eg multiple choice, radio buttons, free-text fields)
-   Synthesis of data from 3 different distinct surveys (adults with tics, parents of children with tics, carers of adults with tics) having largely overlapping item/theme content but not necessarily identically matched response choices\
-   Only partial survey completion by many respondents\
-   Preparation of high-quality PDF output that met the needs of the production team whilst conforming to The Kids style guidelines.

With a target endpoint rather different than the journal articles we are typically preparing for, our experience with the TS collaboration has prompted us to share our approach to tackling larger-scale projects, and any insight it may provide!

# Project design

The reproducible code-based capabilities of R, readily integrated into a suite of output options via the RStudio environment, have provided the ideal platform to compile a comprehensive document of data summaries, tabulations and graphs from which the authors of the report could draw key results for public dissemination. Furthermore, the theming and formatting features of our in-house [`thekidsbiostats` package](https://github.com/The-Kids-Biostats/thekidsbiostats) are a particularly useful asset for preparation of publication-ready output that conforms to The Kids style guide.

In line with current practice of our team, features of our general project design include:

-   Overall organisation being that of a self-contained R project with accompanying sub-directories.(See `thekidsbiostats::create_project()` for project template)

    -   Given the scale of the TS project, generation of tables and figures was further blocked into 9 different files corresponding to the distinct survey sections (background information, 7 impact domains, looking to the future). This enabled code and output to be run and checked in manageable chunks before the resulting tables and plots were reunited in an holistic file.

![Directory/subdirectory setup](examples/file_setup.png){#fig-file_setup height="4in"}

*Use of sub-directories in the project organisation is illustrated by @fig-file_setup.*

-   Main output document files are now Quarto documents (with a .qmd extension), superseding the previous default RStudio Markdown (.mkd) files, having more powerful capabilities but still retaining the header-text-code structure and simplicity and flexibility of the markdown syntax for text formatting. (See a useful reference [here](https://quarto.org/docs/authoring/markdown-basics.html).)

For those unfamiliar with Quarto, note that documents can be written and rendered from either a **visual** view or a **source** view. The **visual** view aims to give format certain elements (e.g. headers, code chunks, bold/italics) as they will appear in the rendered document. **source** is preferred for more control over each element as the formatting syntax is visible and easily modifiable.

![Visual screen of the default new QMD file](examples/visual_qmd.png){#fig-visual height="4in" align="left"}

![Source screen of the default new QMD file](examples/source_qmd.png){#fig-source height="4in" align="left"}

![HTML report](examples/defaultQMD-HTML.png){#fig-defaultHTML}

::: column-margin
@fig-defaultHTML shows the HTML report produced by rendering the default QMD file
:::

<br>

# Robustness and reproducibility

It is inevitable that there will be considerable data pre-processing required prior to undertaking any analysis. (This is often the greatest challenge we find with a project.)

::: callout-important
It is therefore essential that sound data management practices are maintained.
:::

When pre-processing data:\
- **Never** overwrite the raw data\
- Always double-check merging of different data sets is accomplished correctly.\
- Check consistency of data entry/coding for the same variable sourced from different data sets\
- Utilise a data dictionary, and ensure it is noted how missing values are coded\
- Ensure newly created data sets are dated\
- Scrutinize the final data set for anomalies prior to adopting it for analysis.

Furthermore, numerous features of an appropriate project design and ensuing workflow to ensure that the end product of the data analysis is robust and reproducible include:

-   Utilisation of a project template with organised sub-directories (See `thekidsbiostats::create_project()`)

-   Routine ongoing checks that code as written produces the intended results when executed.

-   Utilisation of user-written functions, with appropriate testing, to minimise errors that can creep in when reliant on cut-and-pastes or manual coding of repeated tasks.

-   Use of a document template for report writing that includes a run date in the header and session info at the end (See `thekidsbiostats::create_template()`, which creates .qmd files such as those seen above)

-   Inherent Quarto document features: Self-containment of the run environment, with other inputs called explicitly; auto-save with each render; text interspersed with result-producing code.

# Streamlining and theming

Coding can be streamlined by adoption of time-saving techniques:

-   Setting of document-wide formatting, execution and style parameters in the document header

    -   For example, extra lines of code in the document YAML headers to facilitate numbering (and referencing) of figure and table captions

    -   Further refinement and definition can be accomplished by utilisation of a .css file. (Note the styles.css file created and included in the document header if creating a new document using the Quarto template in `thekidsbiostats` package.)

![Example Quarto document header](examples/YAML.png){#fig-YAML}  

::: column-margin
Document-wide styling can be defined in the Quarto header as in @fig-YAML.
:::

![Some example .css code](examples/CSS.png){#fig-CSS}  

-   Familiarisation with short-cut keys and code (eg see this useful  [bookdown reference](https://bookdown.org/yihui/rmarkdown-cookbook/rstudio-shortcuts.html) )

-   Judicious use of bespoke functions to reduce repetitive coding eg in generation of tables and plots

```{r,echo=T}
# Example code for bespoke function
survey.tblsum<-
  function(dat,missed="no",var_label=NULL)
  {
    if(is.null(var_label))
      var_label=""
    SummaryTbl<-dat %>% 
      tbl_summary(by=Survey,
                  missing=missed) %>%
      add_overall(last=T) %>%
      bold_labels() %>%
      modify_header(label=var_label) %>%
      modify_footnote(everything()~NA)
    return(SummaryTbl)
  }
```
<br>
Professionalism in presentation is enhanced by consistent formatting and theming, which can be embedded into function calls. Note that loading of the `thekidsbiostats` package enabled easy incorporation of Barlow font and the Institute's colour palette as specified in the brand style toolkit.

```{r,echo=T,eval=F}

my_theme <- function(base_size = 11, base_family = "Barlow",
                     base_line_size = base_size/22, base_rect_size = base_size/22,
                     scale_colour_type = "discrete", scale_fill_type = "discrete",
                     colour_theme = "thekids", fill_theme = "thekids",
                     rev_colour = F, rev_fill = F) {

  colour_function <- case_when(
    colour_theme == "thekids" ~
      list(scale_color_thekids(palette = "primary", reverse = rev_colour)),
    colour_theme == "thekids_tint" ~
      list(scale_color_thekids(palette = "tint50", reverse = rev_colour)),
    colour_theme == "thekids_grey" ~
      list(scale_color_thekids(palette = "typography", reverse = T)),
  )[[1]]
  
  fill_function <- case_when(
    fill_theme == "thekids" ~
      list(scale_fill_thekids(palette = "primary", reverse = rev_fill)),
    fill_theme == "thekids_tint" ~
      list(scale_fill_thekids(palette = "tint50", reverse = rev_fill)),
    fill_theme == "thekids_grey" ~
      list(scale_fill_thekids(palette = "typography", reverse = rev_fill)),
  )[[1]]
  
  list(
    theme_classic(base_family = "Barlow",
                base_size = base_size,
                base_line_size = base_line_size,
                base_rect_size = base_rect_size) +
      theme(panel.grid.minor = element_blank(),
            plot.title = element_text(size=rel(1.6)),
            axis.title=element_blank(),
            axis.text = element_text(size=rel(1.2),colour="black"),
            strip.text = element_text(
              size = rel(1.4), hjust = 0,color="black",face=2
            ),
            plot.background = element_rect(fill = "white", colour = "white"),
            strip.background = element_rect(fill = "white", colour = NA)),
    colour_function,
    fill_function
  )
}

# Function to consistently present plots of the same type, with data having a column of rating levels (defined to be a factor) and the proportions to be plotted

do.RatingPlot<-function(Rdat,p.title)
{
  return(ggplot(Rdat,aes(y=prop,x=Rating,fill=Rating)) +
    geom_col(linewidth=0.0)+
    scale_y_continuous(labels=scales::label_percent())+
    labs(x="",y="",
         title=str_wrap(p.title,width=70))+
    my_theme()+
    theme(legend.position="none",
          plot.margin=margin(l=15,b=7.5),
          axis.text.x=element_text(angle=25,hjust=1,size=rel(1.4),color="black")
    )
}



```
<br>

# Figures for publication

At the pointy end of the TS project, we were tasked with generating in a publication-ready format those figures which the authors had chosen to be included in the final public-facing summary report. This required close consultation with the production team to ensure that the images produced in the PDF files that were requested stayed true to the colour and font formatting as intended. After exploration of several options we settled on the `cairo_pdf`function from the `grDevices` package in the System Library because of its superior consistency and clarity of output.


```{r,echo=T,eval=F}
# Code for generating a pdf output file 

load("data/Diagnosis.Rdata") # Loads plot.diagProf, a previously constructed ggplot, into the document run environment

cairo_pdf("examples/diagProf_cairo_pdf.pdf",family="Barlow",height=3.5,width=9)
plot.diagProf
dev.off()

```

```{r,include=F}

load("data/Diagnosis.Rdata") # Loads a previously constructed ggplot into the document run environment

cairo_pdf("examples/diagProf_cairo_pdf.pdf",family="Barlow",height=3.5,width=9)
plot.diagProf
dev.off()


```

```{r}
#| fig-height: 3.5
#| fig-width: 9
#| label: fig-diagProf_html
#| fig-cap: Diagnosing medical professional 
plot.diagProf
```

::: column-margin
**Diagnosing professional**\
Regular HTML report output of a `ggplot` generated figure
:::

![Reproduction of the above figure generated by `cairo_pdf`](examples/diagProf_cairo_pdf.png){#fig-diagProf_cairo_pdf}

::: column-margin
**Diagnosing professional**\
The PDF as generated by cairo_pdf(...,family="Barlow) provides a close likeness to the HTML output of @fig-diagProf_html, and was the preferred format of the production team.
:::

<br>

# Final comments

## Ongoing Challenges

There is always a balance of time investment and where to draw the line when attempting to further one's technical prowess, particularly with R coding! While often times a quick google or ChatGP will help you find a solution relatively quickly, we found here that there seems to be a lack of clear online guidance around PDF exporting options and output discrepancies (embedding issues, default fonts dependency on machine/OS, CMYK for printing vs HTML colour) - fodder for another post!

<br>

## Acknowledgements

Thanks to Wes Billingham, Zac Dempsey, and Robin Cook for providing feedback on and reviewing this post.
<br>

## Reproducibility Information

<button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseOne">

Session Information

</button>

::: {#collapseOne .accordion-collapse .collapse}
<div>

```{r}
sessionInfo()
```

</div>
:::
