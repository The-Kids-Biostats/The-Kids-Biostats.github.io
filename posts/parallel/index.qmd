---
title: "Parallel Computing in R"
author: "Zac Dempsey"
format:
  html:
    code-fold: true
    toc: true
    toc-location: left
date: "2024-06-18"
categories:
  - R
  - Parallel
draft: true
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

```{r echo = F, message = F, warning = F}
library(tidyverse)  # For general "tidyverse" style manipulations
library(parallel)   # base R
library(foreach)    # For looping
library(doParallel) # Parallel back-end for the `foreach` package
```

# Overview

While most of the datasets we work with are of a manageable size here at Telethon Kids, occasionally we are presented with data containing *millions* of rows and/or *thousands* of columns. Performing almost any operation on these large datasets can take hours to execute -- a real test of patience for exploratory work!

Parallel computing is one relatively simple way to reduce computation time on large datasets – leveraging our computer's processing capabilities by simultaneously distributing tasks "in parallel" across multiple processors (without too much extra code). This is particularly useful for loop-based computations/simulations, where multiple parameters/conditions must be swept over whether that as part of variable creation/curation, model execution/tuning, or some other task.

That being said, while parallel computing is not a "magical general solution" to all computationally intensive tasks – it is worth investing some time to understand how it works, and become familiar with the packages and/or functions used within a parallel framework. There are still circumstances where the always handy `purrr::map` function, or basic for-loops can be equally or more efficient than initialising parallel computing.

```{r echo = F}
#Parallel computing is a way to use more of your computer's resources to get these operations done quicker, and hopefully with not too much extra code. (That being said, with particularly large datasets, its worth investing the time to make sure there aren't functions and/or packages that significantly speed things up even without parallel computing.)
```

<p>

# What is Parallel Computing?

Parallel computing refers to executing multiple operations in "parallel" (i.e. at the same time) across a machine's multiple cores/processors. Most modern computers have at least four cores, and often many more. By default, R uses only one core, running iterative operations sequentially; not starting the next until the previous is complete. However, under a parallel framework, multiple iterations/calculations can be allocated across multiple cores so they can be executed at the same time, thus saving time.

In this post, we will have a look at a couple of examples using `R`. We provide some simple examples and use-cases, in addition to some further resources if you would like to learn more.

The [`doParallel`](#0) and [`foreach`](#0) packages of `R` are one set of packages, intended to be used together, to facilitate a syntactically simple parallel computing environment in `R` – by use of the `%dopar%` operator. Additionally the base `parallel` package is used for some basic set-up and detection.

These examples are run using `r R.version$version.string` on `r Sys.info()["sysname"]` `r Sys.info()["release"]`.

<br>

## Setup

-   Let's check the number of cores available on our machine.

```{r echo = T}
parallel::detectCores()
```

<p>

-   We should not allocate all of our machine's available cores to parallel computations – this will consume all of the available resources!
-   Let's use 6 cores for our examples.

```{r echo = T}
doParallel::registerDoParallel(6)
```

-   Below is a screenshot from the Windows task manager. R "front-end" instances are initialised for each of the 6 initialised cores.

```{r out.width="700px", fig.align='center', echo = F}
knitr::include_graphics(path = "parallel_comps.png")
```

-   When we no longer require a parallel environment, we must shut down and de-register the parallel cluster – otherwise they will remain active.

```{r echo = T}
doParallel::stopImplicitCluster()
```

-   Let's also set a random seed for sample reproducibility

```{r echo = T}
set.seed(2024)
```

<br>

# Example 1: Bootstrapping

Bootstrapping is a relatively simple method that uses random sampling with replacement to mimic random sampling of a population. This allows us to estimate the sampling distribution for a statistic (mean, variance, etc.) and assess its stability/reliability, without making strong assumptions about the underlying population. This can be useful when the data are problematic in some fundamental way (small sample sizes, insufficient variation, violation of model assumptions).

In `R`, for-loops can be used to derive a set of bootstrap samples. As we will see, parallel environments can much more efficiently handle operations like these of a repeated nature.

-   Let's use the `mtcars` data set to run a basic linear regression.
    -   We would like to explore the association between a vehicle's fuel efficiency (`mpg`) and horsepower (`hp`), weight (`wt`) and transmission type (automatic/manual, `am`).
-   We suspect some of the assumptions of standard linear regression may be violated (normality of errors) because of the small sample size. By bootstrapping, we can explore the stability of the regression coefficients by calculating a confidence interval about the bootstrapped coefficient estimates.

```{r echo = T}
# Let's set up the data and number of bootstrap samples
data(mtcars)
mtcars <- as_tibble(mtcars)

head(mtcars)
```

<p>

-   Let's set the number of bootstrap trials.

```{r echo = T}
trials <- 10000 # Number of bootstrap samples
```

<p>

## For-loop

-   Let's begin by using the "tried and true" for-loop. For each of the `r trials` bootstrap samples, we:
    -   Initialise a bootstrap sample, `ind`.
    -   Run our linear regression on the bootstrap sample, `results`
    -   Extract the coefficients from `results`, and append this to an overall coefficient matrix `bootstrap_coefs`.
-   Subsequently, we can calculate a 95% confidence interval for each of our parameter estimates by taking the 2.5th and 97.5th percentiles from the bootstrap distribution.

```{r echo = T}
start <- proc.time() # Start our timer!

# Initialise a matrix to store the coefficients from each bootstrap sample
bootstrap_coefs <- matrix(NA, nrow = trials, ncol = 4)
colnames(bootstrap_coefs) <- names(coef(lm(mpg ~ hp + wt + am, data = mtcars)))

for (i in 1:trials){
  ind <- mtcars[sample(nrow(mtcars), replace = TRUE),]
  result <- lm(mpg ~ hp + wt + as_factor(am), data = ind)
  
  bootstrap_coefs[i, ] <- coef(result)
}

# Calculate the 2.5th and 97.5th percentile for each variable's coefficient estimates from the bootstrap distribution.
bootstrap_cis <- apply(bootstrap_coefs, 2, function(coefs){quantile(coefs, probs = c(0.025, 0.975))})

end <- proc.time() # End our timer!
time1 <- end-start
print(time1)
```

<p>

## `%do%` loop (not parallel)

-   As an alternative, let's also use the `%do%` operator from the `foreach` package. Similar to a for-loop, the loop is sequentially executed.
-   This is similar in execution time to the for-loop operation..

```{r echo = T}
start <- proc.time()

bootstrap_results <- foreach::foreach(i = 1:trials, .combine = rbind) %do% {
  ind <- mtcars[sample(nrow(mtcars), replace = TRUE), ]
  result <- lm(mpg ~ hp + wt + am, data = ind)
  coef(result)
}

# Calculate the 2.5th and 97.5th percentile for each variable's coefficient estimates from the bootstrap distribution.
bootstrap_cis <- apply(bootstrap_results, 2, function(coefs) {quantile(coefs, probs = c(0.025, 0.975))})

end <- proc.time()
time2 <- end-start
print(time2)
```

<p>

## `%dopar%` parallelisation

-   Now, let's run this in parallel across 6 cores.
-   The execution time is significantly reduced relative to the above two cases.
-   The `%dopar%` operator defines the for-loop in the parallel environment.

```{r echo = T}
doParallel::registerDoParallel(cores = 6)

start <- proc.time()
bootstrap_results <- foreach(i = 1:trials, .combine = rbind, .packages = 'stats') %dopar% {
  ind <- mtcars[sample(nrow(mtcars), replace = TRUE), ]
  result <- lm(mpg ~ hp + wt + am, data = ind)
  coef(result)
}

# Calculate the 2.5th and 97.5th percentile for each variable's coefficient estimates from the bootstrap distribution.
bootstrap_cis <- apply(bootstrap_results, 2, function(coefs) {quantile(coefs, probs = c(0.025, 0.975))})

end <- proc.time()
time3 <- end-start
print(time3)

doParallel::stopImplicitCluster()
```

We can see that the parallel initialisation is significantly faster than traditional for-loop methods— about `r paste0(round(100*(time1[3]-time3[3])/time1[3],0),"%")` so! For datasets greater in size, or with more bootstrap samples, these time savings certainly add up.

<br>

# Example 2: Parallel regressions with different outcomes

-   Now let's apply this to a different situation – where we have different model specifications we would like to run on the same "large" data set.
-   Let's use `nycflights13::flights` dataset – a set of over 300,000 flight records that departed from all NYC airports in 2013.
-   We would like to explore how arrival delay (as a continuous and dichotomous outcome variable) may be influenced by a set of independent variables. We would like to stratify this by month.

```{r echo = T}
flights <- nycflights13::flights
flights <- flights %>%
  select(year, month, day, dep_delay, arr_delay, air_time, distance) %>%
  mutate(arr_delay_bin = as.factor(case_when(arr_delay >  15 ~ 1, TRUE ~ 0)))
flights

```

<p>

We would like to specify a set of models to explore flight delay

-   Outcome variables

    -   Arrival delay (continuous)

    -   Arrival delayed (dichotomous)

-   Independent variables

    -   Flight distance (`distance`)

    -   Air time (`air_time`)

    -   Departure delay (`dep_delay`)

-   Stratification variable

    -   Month (`month`)

```{r echo = T}
indep_vars <- c("distance", "air_time", "dep_delay")
outcome_vars <- c("arr_delay", "arr_delay_bin")

#formulas <- map(output_vars, ~paste(.x, "~", paste(input_vars, collapse = " + ")))
```

<p>

## For-loop

-   For each "month", we extract the subset of data

-   For each outcome variable, we run a model. If the outcome variable is continuous, we run a simple linear model; otherwise we run a basic logistic regression.

```{r echo = T, warning=F, message=F}
start <- proc.time()
for (i in unique(flights$month)){
  month_dat <- flights %>% filter(month == i)
  for (j in outcome_vars){
    if (j == "arr_delay"){
      model <- lm(as.formula(paste(j,"~",paste(indep_vars, collapse = "+"))),
                  data = month_dat)
    } else if (j == "arr_delay_bin"){
      model <- glm(as.formula(paste(j,"~",paste(indep_vars, collapse = "+"))),
                   family = binomial,
                   data = month_dat)
    }
  }
}
end <- proc.time()
time4 <- end-start
print(time4)
```

<p>

## `%dopar%` parallelisation

-   Similar situation to before. We use the `%:%` operator from the `foreach` package to nest a for-loop within a parallel environment.

-   The syntax does not differ too dramatically.

```{r echo = T}
doParallel::registerDoParallel(cores = 6)

start <- proc.time()
results <- foreach(i = unique(flights$month), .packages = "stats") %:%
  foreach(j = outcome_vars) %dopar% {
    month_dat <- subset(flights, month = i)
    if (j == "arr_delay"){
      model <- lm(as.formula(paste(j,"~",paste(indep_vars, collapse = "+"))),
                  data = month_dat)
    } else if (j == "arr_delay_bin"){
      model <- glm(as.formula(paste(j,"~",paste(indep_vars, collapse = "+"))),
                   family = binomial,
                   data = month_dat)
    }
  }
end <- proc.time()
time5 <- end - start
print(time5)

doParallel::stopImplicitCluster()
```

Again, this simple example represents a `r paste0(round(100*(time4[3]-time5[3])/time4[3],0),"%")` time saving relative to a standard for-loop implementation.

<br>

# Conclusion

Using just a few relatively simple examples, we have demonstrated that a parallel computing environment, can be a relatively easy and quick way to improve the runtime of iteration/loop-based operations - with little modification to your code!

While not appropriate in all circumstances (depending on the exact use-case), it is worth being across the relevant packages and commands used in `R` for parallel computing, particularly as datasets grow increasingly large and analytical methodologies increasingly complex.

<br>

## Acknowledgements

Thanks to Wesley Billingham, Matt Cooper and Elizabeth McKinnon for providing feedback on and reviewing this post.

You can look forward to seeing posts from these other team members here in the coming weeks and months.

<br>

# Further Resources

-   Vignettes
    -   <https://cran.r-project.org/web/packages/doParallel/vignettes/gettingstartedParallel.pdf>
-   Tutorials
    -   <https://unc-libraries-data.github.io/R-Open-Labs/Extras/Parallel/foreach.html>

<br>

## Reproducibility Information

To access the .qmd (Quarto markdown) files as well as any R scripts or data that was used in this post, please visit our GitHub:

<https://github.com/The-Kids-Biostats/The-Kids-Biostats.github.io/tree/main/posts/parallel>

The session information can also be seen below.

```{r echo = T}
sessionInfo()
```

```{r echo = F}
rm(time1, time2, time3, time4, time5, trials, results, i, j, model, outcome_vars, input_vars, start, end, ind, bootstrap_results, bootstrap_coefs, bootstrap_cis, mtcars, result, month_dat, flights)
```
