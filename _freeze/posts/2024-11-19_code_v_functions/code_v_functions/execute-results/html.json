{
  "hash": "1bb7aad3876318c20b15dd81746d3519",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Sharing - Code v Functions\"\nauthor: \"Dr Matt Cooper and Zac Dempsey\"\nformat:\n  html:\n    code-fold: true\n    tabset: true\n    toc: true\n    toc-location: left\ndate: \"2024-11-19\"\ncategories:\n  - R\n  - Visualisations\n  - Likert\n  - ggplot\ndraft: false\neditor_options: \n  chunk_output_type: console\nexecute:\n  echo: true\n  warning: false\n  message: false\n  error: true\nfig-align: center\nfig-format: png\nfig-dpi: 300\n---\n\n\n\n# Overview\n\n(Lengthy) readable code. Efficient functions comprised of the minimum number of characters necessary. An age old battle in programming.\n\nWay back when there were only two users on Bluesky, I linked to one of our earlier [blog posts](https://the-kids-biostats.github.io/posts/2024-10-14_likert_visualisation/likert_visualisations.html) where we presented a nice way to visualise pre-post ordinal Likert data.\n\n![The figure](pre_post_plot.png){fig-align=\"center\" width=\"80%\"}\n\nThe only other user on Bluesky at the time commented:\n\n![The comment](comment.png){fig-align=\"center\" width=\"80%\"}\n\nAll of the points raised were correct. It was a good post, but there was a lot of repetition in the code. Which got me thinking about the age old battle in programming...\n\n# The case for code\n\nThere are (always) a lot of people out there learning to use R, and a lot of them love experimenting with the great visualisation tools R has to offer. And a lot of those people are still learning to be code *savvy*. I know this because I cross paths with this type of user multiple times a week—copy and pasting examples from blogs (like this) and/or using trial and error to learn. It is this large cohort of users that one can appeal to by sharing verbose code.\n\nSome benefits of posting code:\n\n-   If one encounters an error, it is easy for someone still learning to run the code in stages to identify where the problem may be,\n-   If one wants to make minor changes (colours, line thickness, alpha etc.), they can easily see where to dive in and do so,\n-   It is crystal clear what and where the code can (successfully) be customised. For example, customisations can be made without having to worry whether those arguments will be honoured by the function and not return a deluge of errors, and\n-   It reinforces the amount of work that goes into producing an end result, and\n-   It gives the reader direct line of sight to foundational code concepts and principles, as opposed to these being hidden and/or the outputs appearing seemingly by magic.\n\nFor example:\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Code for the first bar plot\n\nlibrary(simstudy)\nlibrary(ggsankey); library(patchwork)\nlibrary(thekidsbiostats) # install with remotes::install_github(\"The-Kids-Biostats/thekidsbiostats\")\n\n\np1 <- dat %>% \n  filter(group == \"Intervention\") %>% \n  group_by(pre) %>% \n  tally() %>% \n  mutate(freq = n / sum(n),\n         res = str_c(n, \"\\n(\", round(freq*100, 1), \"%)\")) %>% \n  ggplot(aes(x = as.factor(pre), y = freq)) +\n  geom_bar(aes(fill = as.factor(pre)), stat=\"identity\", alpha = 0.8,\n           colour = \"black\") +\n  theme_institute(base_size = 14) +\n  theme(legend.position = \"none\",\n        panel.grid.major.x = element_blank(),\n        plot.title = element_text(hjust = 0.5)) +\n  scale_y_continuous(labels = scales::percent_format(),\n                     breaks = seq(0, max_prop, by = 0.05),\n                     expand = expansion(mult = c(0, 0.1))) +\n  coord_cartesian(ylim = c(0, max_prop)) +\n  scale_fill_viridis_d(option = \"plasma\", end = 0.85, direction = -1) +\n  labs(title = \"Pre\",\n       fill = \"Response\",\n       x = \"Response\", y = \"\") +\n  geom_text(aes(label = res), vjust = -0.1,\n            family = \"Barlow Semi Condensed\") +\n  guides(fill = guide_legend(nrow = 1))\n```\n:::\n\n\n\n::: column-margin\nThe purpose of this post is not really about *running* this code. However, if you are looking to, the code to create the `dat` this relates to can be [found here](https://the-kids-biostats.github.io/posts/2024-10-14_likert_visualisation/likert_visualisations.html).\n:::\n\n\nAlso, in no time at all, one can copy that code into an LLM, and ask it to explain what is happening each step along the way (assuming, of course, the author didn't take the time to do that themselves...).\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n# Filter and process data for the \"Intervention\" group\np1 <- dat %>% \n  filter(group == \"Intervention\") %>%  # Keep only rows where 'group' is \"Intervention\"\n  group_by(pre) %>%  # Group data by 'pre' variable\n  tally() %>%  # Count the number of occurrences in each 'pre' group\n  mutate(\n    freq = n / sum(n),  # Calculate frequency for each group as a proportion\n    res = str_c(n, \"\\n(\", round(freq * 100, 1), \"%)\")  # Create label with count and percentage\n  ) %>%\n  # Start plotting the processed data\n  ggplot(aes(x = as.factor(pre), y = freq)) +  # Define x-axis as 'pre' factor and y-axis as frequency\n  # Add bars to the plot\n  geom_bar(\n    aes(fill = as.factor(pre)),  # Use 'pre' as fill color for each bar\n    stat = \"identity\",  # Use actual values for bar height\n    alpha = 0.8,  # Set transparency of bars\n    colour = \"black\"  # Add black outline to bars\n  ) +\n...\n...\n```\n:::\n\n\n\nThe full commented code for the above plot is below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Filter and process data for the \"Intervention\" group\np1 <- dat %>% \n  filter(group == \"Intervention\") %>%  # Keep only rows where 'group' is \"Intervention\"\n  group_by(pre) %>%  # Group data by 'pre' variable\n  tally() %>%  # Count the number of occurrences in each 'pre' group\n  mutate(\n    freq = n / sum(n),  # Calculate frequency for each group as a proportion\n    res = str_c(n, \"\\n(\", round(freq * 100, 1), \"%)\")  # Create label with count and percentage\n  ) %>% \n\n  # Start plotting the processed data\n  ggplot(aes(x = as.factor(pre), y = freq)) +  # Define x-axis as 'pre' factor and y-axis as frequency\n  \n  # Add bars to the plot\n  geom_bar(\n    aes(fill = as.factor(pre)),  # Use 'pre' as fill color for each bar\n    stat = \"identity\",  # Use actual values for bar height\n    alpha = 0.8,  # Set transparency of bars\n    colour = \"black\"  # Add black outline to bars\n  ) +\n  \n  # Apply custom theme for aesthetic consistency\n  theme_institute(base_size = 14) +  # Use institute's custom theme with base font size 14\n  theme(\n    legend.position = \"none\",  # Remove legend from the plot\n    panel.grid.major.x = element_blank(),  # Remove major grid lines on x-axis\n    plot.title = element_text(hjust = 0.5)  # Center-align the plot title\n  ) +\n  \n  # Customize the y-axis scale\n  scale_y_continuous(\n    labels = scales::percent_format(),  # Show y-axis labels as percentages\n    breaks = seq(0, max_prop, by = 0.05),  # Define tick marks on y-axis\n    expand = expansion(mult = c(0, 0.1))  # Add space above the bars for clarity\n  ) +\n  \n  # Set the limits of the y-axis\n  coord_cartesian(ylim = c(0, max_prop)) +  # Constrain y-axis from 0 to 'max_prop'\n  \n  # Define color palette for fill colors\n  scale_fill_viridis_d(\n    option = \"plasma\",  # Use \"plasma\" color scheme from the viridis package\n    end = 0.85,  # Limit the color intensity at the end\n    direction = -1  # Reverse the color scale\n  ) +\n  \n  # Add titles and labels\n  labs(\n    title = \"Pre\",  # Set the main title for the plot\n    fill = \"Response\",  # Label for the fill legend (not shown since legend is removed)\n    x = \"Response\",  # Label for x-axis\n    y = \"\"  # No label for y-axis\n  ) +\n  \n  # Add text labels on top of each bar\n  geom_text(\n    aes(label = res),  # Use 'res' (count and percent label) for text labels\n    vjust = -0.1,  # Position text slightly above each bar\n    family = \"Barlow Semi Condensed\"  # Use specific font for text labels\n  ) +\n  \n  # Customize the legend layout\n  guides(\n    fill = guide_legend(nrow = 1)  # Arrange legend items in a single row (applies if legend is displayed)\n  )\n```\n:::\n\n\n\n# The case for functions\n\nOf course, this figure was actually used repeatedly multiple times in a report we were producing, across a range of pre-post ordinal Likert variables. So we wrapped this code into a function so it could be called and used regularly without making our actual report (`.qmd`) incredibly lengthy.\n\nSome benefits of posting functions:\n\n-   All code is reusable, per se, but making the effort to put your code into a function makes it *readily* reuseable,\n-   It can remove a barrier to entry, especially for those who don't want to clutter the `.qmd` files or risk any copying errors—they can load the function in and get on with their day,\n-   It can increase uptake, as more advanced users may view the solution as more robust and flexible (less customised) than they would if it is simply presented as a 'wall of code', and\n-   You can reduce the risk of errors, as the process of turning code into a more generic function often reveals areas where hard coded parameters become problematic (or where there might be a copy and paste error). This can force you to make the code more versatile and reduce the likelihood of hard coded or specific use case errors creeping in.\n\nSo what did this look like in our actual use case?\n\nExpand the code below to see how our `ordinal_plot()` function was structured.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nordinal_plot <- function(data,\n                         left_var = \"pre\",\n                         left_title = \"Pre\",\n                         left_fill_title = \"Response\",\n                         left_x_axis_label = \"Response\",\n                         left_y_axis_label = \"\",\n                         center_title = \"Pre-Post\",\n                         center_fill_title = \"Response\",\n                         center_x_axis_label = \"\",\n                         center_y_axis_label = \"\",\n                         right_var = \"post\",\n                         right_title = \"Post\",\n                         right_fill_title = \"Response\",\n                         right_x_axis_label = \"Response\",\n                         right_y_axis_label = \"\",\n                         legend.position = \"bottom\",\n                         id_var = \"id\") {\n  \n  vars <- c(id_var, left_var, right_var)\n  \n  max_prop <- dat %>%\n    select(all_of(vars)) %>%\n    pivot_longer(cols = c(!!sym(left_var), !!sym(right_var))) %>%\n    group_by(name) %>%\n    count(value) %>%\n    mutate(freq = n / sum(n)) %>%\n    .$freq %>%\n    max\n  \n  max_prop <- plyr::round_any(max_prop, 0.05, f = ceiling)\n\n  p1 <- dat %>%\n    group_by(!!sym(left_var)) %>%\n    tally() %>%\n    mutate(freq = n / sum(n),\n           res = str_c(n, \"\\n(\", round(freq * 100, 1), \"%)\")) %>%\n    ggplot(aes(x = as.factor(!!sym(left_var)), y = freq)) +\n    geom_bar(\n      aes(fill = as.factor(!!sym(left_var))),\n      stat = \"identity\",\n      alpha = 0.8,\n      colour = \"black\"\n    ) +\n    theme_institute(base_size = 14) +\n    theme(\n      legend.position = \"none\",\n      panel.grid.major.x = element_blank(),\n      plot.title = element_text(hjust = 0.5)\n    ) +\n    scale_y_continuous(\n      labels = scales::percent_format(),\n      breaks = seq(0, max_prop, by = 0.05),\n      expand = expansion(mult = c(0, 0.1))\n    ) +\n    coord_cartesian(ylim = c(0, max_prop)) +\n    scale_fill_viridis_d(option = \"plasma\",\n                         end = 0.85,\n                         direction = -1) +\n    labs(\n      title = left_title,\n      fill = left_fill_title,\n      x = left_x_axis_label,\n      y = left_y_axis_label\n    ) +\n    geom_text(aes(label = res), vjust = -0.1, family = \"Barlow Semi Condensed\") +\n    guides(fill = guide_legend(nrow = 1))\n\n  p2 <- dat %>%\n    rename(Pre = !!sym(left_var), Post = !!sym(right_var)) %>%\n    make_long(Pre, Post) %>%\n    mutate(node = factor(node, levels = c(7, 6, 5, 4, 3, 2, 1)),\n           next_node = factor(next_node, levels = c(7, 6, 5, 4, 3, 2, 1))) %>%\n    ggplot(aes(\n      x = x,\n      next_x = next_x,\n      node = node,\n      next_node = next_node,\n      fill = factor(node)\n    ), alpha = 0.8) +\n    geom_sankey(alpha = 0.8, node.color = 'black') +\n    geom_sankey_label(\n      aes(label = node),\n      alpha = 0.8,\n      size = 3,\n      color = \"black\",\n      fill = \"gray80\"\n    ) +\n    scale_x_discrete(expand = c(0.05, 0.05)) +\n    theme_institute(base_size = 14) +\n    theme(\n      panel.grid.major = element_blank(),\n      panel.grid.minor = element_blank(),\n      axis.title.y = element_blank(),\n      axis.text.y = element_blank(),\n      axis.ticks = element_blank(),\n      legend.position = legend.position,\n      plot.title = element_text(hjust = 0.5)\n    ) +\n    guides(fill = guide_legend(reverse = T, nrow = 1)) +\n    labs(title = center_title, fill = center_fill_title, x = center_x_axis_label)\n\n  p3 <- dat %>%\n    group_by(!!sym(right_var)) %>%\n    tally() %>%\n    mutate(freq = n / sum(n),\n           res = str_c(n, \"\\n(\", round(freq * 100, 1), \"%)\")) %>%\n    ggplot(aes(x = as.factor(!!sym(right_var)), y = freq)) +\n    geom_bar(\n      aes(fill = as.factor(!!sym(right_var))),\n      stat = \"identity\",\n      alpha = 0.8,\n      colour = \"black\"\n    ) +\n    theme_institute(base_size = 14) +\n    theme(\n      legend.position = \"none\",\n      panel.grid.major.x = element_blank(),\n      plot.background = element_blank(),\n      plot.title = element_text(hjust = 0.5)\n    ) +\n    scale_y_continuous(\n      labels = scales::percent_format(),\n      breaks = seq(0, max_prop, by = 0.05),\n      expand = expansion(mult = c(0, 0.1))\n    ) +\n    coord_cartesian(ylim = c(0, max_prop)) +\n    scale_fill_viridis_d(option = \"plasma\",\n                         end = 0.85,\n                         direction = -1) +\n    labs(\n      title = right_title,\n      fill = right_fill_title,\n      x = right_x_axis_label,\n      y = right_y_axis_label\n    ) +\n    geom_text(aes(label = res), vjust = -0.1, family = \"Barlow Semi Condensed\") +\n    guides(fill = guide_legend(nrow = 1))\n\n  p1 + p2 + p3\n}\n```\n:::\n\n\n\n::: column-margin\nYou will see the use of `!!sym(..)` here. This is to do with 'injecting' 'expressions' within functions. It can be tricky to understand. The `sym()` part removes the quote marks from the string and makes it a symbol (as in, a name that relates to an object in). The `!!` part injects the 'symbol' (remember, relating to the object) rather than just injecting the 'character string' per se.\n:::\n\nAnd how did we used it with the report (`.qmd`)?\n\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"false\"}\n...\nsource(\".../ordinal_plot.R\")\n...\n\n# Change in response - intervention group\n\nSome descriptive text ..., and, below is the figure.\n\\```{r fig.width = 8, fig.height = 6}\ndat %>% \n  filter(group == \"Intervention\") %>% \n  ordinal_plot()\n\\```\n```\n:::\n\n\n\n-   We certainly acknowledge that we could have included more arguments in our function to be passed through to the active code to facilitate additional on the fly customisability. The balance we settled on here was a function that was sufficiently versatile for the elements we needed to modify through our reporting use case - and we perhaps avoided obscurity by unnecessarily having 'everything' passed through.\n\n# Closing comments\n\nWhen deciding between using basic code or wrapping that code it into functions, it's important to balance simplicity and efficiency, and think of your audience. For R-based visualisations and reproducible research workflows used within in Quarto documents, showing basic code offers transparency and fosters learning, making it ideal for teaching or exploratory analyses. On the other hand, functions enhance re-usability and scalability, streamlining workflows for complex or repeated tasks.\n\nBy combining both approaches (in a blog post)—sharing foundational coding steps while having a more advanced option to encapsulate repetitive tasks within functions—you can assist both beginners and advanced users to create clear, flexible, and reproducible documents and workflows.\n\n# Acknowledgements\n\nThanks to Wesley Billingham and Dr Elizabeth McKinnon for providing feedback on and reviewing this post.\n\n## Reproducibility Information\n\nTo access the .qmd (Quarto markdown) files as well as any R scripts or data that was used in this post, please visit our GitHub:\n\n<https://github.com/The-Kids-Biostats/The-Kids-Biostats.github.io/tree/main/posts/>\n\nThe session information can also be seen below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.4.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Australia/Perth\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.3.3    fastmap_1.2.0     cli_3.6.3        \n [5] tools_4.3.3       htmltools_0.5.8.1 rstudioapi_0.17.1 yaml_2.3.10      \n [9] rmarkdown_2.29    knitr_1.49        jsonlite_1.8.9    xfun_0.49        \n[13] digest_0.6.37     rlang_1.1.4       evaluate_1.0.1   \n```\n\n\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}